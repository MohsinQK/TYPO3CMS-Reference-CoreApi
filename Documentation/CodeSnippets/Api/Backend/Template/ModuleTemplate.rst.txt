.. Generated by https://github.com/linawolf/t3docs_restructured_api_tools 
.. php:namespace::  TYPO3\CMS\Backend\Template

.. php:class:: ModuleTemplate

   A class taking care of the "outer" HTML of a module, especially
   the doc header and other related parts.
   
   See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Template/ModuleTemplate.php>`__.

   
   .. php:method:: assign(string key, mixed value)
   
      Add a variable to the view data collection.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Template/ModuleTemplate.php#L100>`__.
      
      :param string $key: the key
      :param mixed $value: the value
      :returntype: self
      
   .. php:method:: assignMultiple(array values)
   
      Add multiple variables to the view data collection.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Template/ModuleTemplate.php#L109>`__.
      
      :param array $values: the values
      :returntype: self
      
   .. php:method:: render(string templateFileName = '')
   
      Render the module.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Template/ModuleTemplate.php#L118>`__.
      
      :param string $templateFileName: the templateFileName, default: ''
      :returntype: string
      
   .. php:method:: renderResponse(string templateFileName = '')
   
      Render the module and create an HTML 200 response from it. This is a
      lazy shortcut so controllers don't need to take care of this in the backend.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Template/ModuleTemplate.php#L128>`__.
      
      :param string $templateFileName: the templateFileName, default: ''
      :returntype: Psr\\Http\\Message\\ResponseInterface
      
   .. php:method:: setBodyTag(string bodyTag)
   
      Set to something like '<body id="foo">' when a special body tag is needed.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Template/ModuleTemplate.php#L167>`__.
      
      :param string $bodyTag: the bodyTag
      :returntype: self
      
   .. php:method:: setTitle(string title, string context = '')
   
      Title string of the module: "My module Â· Edit view"
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Template/ModuleTemplate.php#L176>`__.
      
      :param string $title: the title
      :param string $context: the context, default: ''
      :returntype: self
      
   .. php:method:: getDocHeaderComponent()
   
      Get the DocHeader. Can be used in controllers to add custom
      buttons / menus / ... to the doc header.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Template/ModuleTemplate.php#L190>`__.
      
      :returntype: TYPO3\\CMS\\Backend\\Template\\Components\\DocHeaderComponent
      
   .. php:method:: setForm(string formTag = '')
   
      A "<form>" tag encapsulating the entire module, including doc-header.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Template/ModuleTemplate.php#L198>`__.
      
      :param string $formTag: the formTag, default: ''
      :returntype: self
      
   .. php:method:: setModuleId(string moduleId)
   
      Optional 'data-module-id="{moduleId}"' on first <div> in body.
      
      Can be helpful in JavaScript.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Template/ModuleTemplate.php#L208>`__.
      
      :param string $moduleId: the moduleId
      :returntype: self
      
   .. php:method:: setModuleName(string moduleName)
   
      Optional 'data-module-name="{moduleName}"' on first <div> in body.
      
      Can be helpful in JavaScript.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Template/ModuleTemplate.php#L218>`__.
      
      :param string $moduleName: the moduleName
      :returntype: self
      
   .. php:method:: setModuleClass(string moduleClass)
   
      Optional 'class="module {moduleClass}"' on first <div> in body.
      
      Can be helpful styling modules.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Template/ModuleTemplate.php#L228>`__.
      
      :param string $moduleClass: the moduleClass
      :returntype: self
      
   .. php:method:: addFlashMessage(string messageBody, string messageTitle = '', int severity = 0, bool storeInSession = true)
   
      Creates a message object and adds it to the FlashMessageQueue.
      
      These messages are automatically rendered when the view is rendered.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Template/ModuleTemplate.php#L238>`__.
      
      :param string $messageBody: the messageBody
      :param string $messageTitle: the messageTitle, default: ''
      :param int $severity: the severity, default: 0
      :param bool $storeInSession: the storeInSession, default: true
      :returntype: self
      
   .. php:method:: setFlashMessageQueue(TYPO3\\CMS\\Core\\Messaging\\FlashMessageQueue flashMessageQueue)
   
      ModuleTemplate by default uses queue 'core.template.flashMessages'. Modules
      may want to maintain an own queue. Use this method to render flash messages
      of a non-default queue at the default position in module HTML output. Call
      this method *before* adding single messages with addFlashMessage().
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Template/ModuleTemplate.php#L251>`__.
      
      :param TYPO3\\CMS\\Core\\Messaging\\FlashMessageQueue $flashMessageQueue: the flashMessageQueue
      :returntype: self
      
   .. php:method:: setUiBlock(bool uiBlock)
   
      UI block is a spinner shown during browser rendering phase of the module,
      automatically removed when rendering finished. This is done by default,
      but the UI block can be turned off when needed for whatever reason.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Template/ModuleTemplate.php#L262>`__.
      
      :param bool $uiBlock: the uiBlock
      :returntype: self
      
   .. php:method:: getView()
   
      
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Template/ModuleTemplate.php#L271>`__.
      
      :returntype: TYPO3\\CMS\\Fluid\\View\\StandaloneView
      
   .. php:method:: setContent(string content)
   
      
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Template/ModuleTemplate.php#L281>`__.
      
      :param string $content: the content
      :returntype: self
      
   .. php:method:: renderContent()
   
      
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Template/ModuleTemplate.php#L291>`__.
      
      :returntype: string
      
   .. php:method:: getBodyTag()
   
      Returns the current body tag.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Template/ModuleTemplate.php#L346>`__.
      
      :returntype: string
      
   .. php:method:: registerModuleMenu(string moduleMenuIdentifier)
   
      Generates the Menu for things like Web->Info
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Template/ModuleTemplate.php#L356>`__.
      
      :param string $moduleMenuIdentifier: the moduleMenuIdentifier
      :returntype: self
      
   .. php:method:: makeDocHeaderModuleMenu(array additionalQueryParams = array (
   ))
   
      Generates a menu in the docheader to access third-level modules
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Template/ModuleTemplate.php#L365>`__.
      
      :param array $additionalQueryParams: the additionalQueryParams, default: array (
      )
      :returntype: self
      
   .. php:method:: getDynamicTabMenu(array $menuItems, string $domId, int $defaultTabIndex, bool $collapsible, bool $wrapContent, bool $storeLastActiveTab)
   
      Creates a tab menu where the tabs or collapsible are rendered with bootstrap markup
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Template/ModuleTemplate.php#L420>`__.
      
      :param array $menuItems: Tab elements, each element is an array with "label" and "content"
      :param string $domId: DOM id attribute, will be appended with an iteration number per tab.
      :param int $defaultTabIndex: Default tab to open (for toggle <=0). Value corresponds to integer-array index + 1
      (index zero is "1", index "1" is 2 etc.). A value of zero (or something non-existing
      will result in no default tab open.
      :param bool $collapsible: If set, the tabs are rendered as headers instead over each sheet. Effectively this means
      there is no tab menu, but rather a foldout/fold-in menu.
      :param bool $wrapContent: If set, the content is wrapped in div structure which provides a padding and border
      style. Set this FALSE to get unstyled content pane with fullsize content area.
      :param bool $storeLastActiveTab: If set, the last open tab is stored in local storage and will be re-open again.
      If you don't need this feature, e.g. for wizards like import/export you can
      disable this behaviour.
      :returntype: string
      
   .. php:method:: header(string $text, bool $inlineEdit)
   
      Returns the header-bar in the top of most backend modules
      Closes section if open.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Template/ModuleTemplate.php#L451>`__.
      
      :param string $text: The text string for the header
      :param bool $inlineEdit: Whether the header should be editable (e.g. page title)
      :returntype: string
      :returns: HTML content
      
   .. php:method:: isUiBlock()
   
      
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Template/ModuleTemplate.php#L477>`__.
      
      :returntype: bool
