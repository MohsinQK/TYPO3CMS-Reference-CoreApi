.. Generated by https://github.com/linawolf/t3docs_restructured_api_tools 
.. php:namespace::  TYPO3\CMS\Backend\Module

.. php:class:: ModuleData

   A simple DTO containing the user specific module settings, e.g. whether the clipboard is shown.
   
   The DTO is created in the PSR-15 middleware BackendModuleValidator, in case a backend module
   is requested and the user has necessary access permissions. The created DTO is then added as
   attribute to the PSR-7 Request and can be further used in components, such as middlewares or
   the route target (usually a backend controller).
   
   See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Module/ModuleData.php>`__.

   
   .. php:method:: createFromModule(TYPO3\\CMS\\Backend\\Module\\ModuleInterface module, array data)
   
      
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Module/ModuleData.php#L41>`__.
      
      :param TYPO3\\CMS\\Backend\\Module\\ModuleInterface $module: the module
      :param array $data: the data
      :returntype: self
      
   .. php:method:: getModuleIdentifier()
   
      
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Module/ModuleData.php#L50>`__.
      
      :returntype: string
      
   .. php:method:: get(string propertyName, mixed default = NULL)
   
      
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Module/ModuleData.php#L55>`__.
      
      :param string $propertyName: the propertyName
      :param mixed $default: the default, default: NULL
      :returntype: mixed
      
   .. php:method:: has(string propertyName)
   
      
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Module/ModuleData.php#L60>`__.
      
      :param string $propertyName: the propertyName
      :returntype: bool
      
   .. php:method:: set(string propertyName, mixed value)
   
      
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Module/ModuleData.php#L65>`__.
      
      :param string $propertyName: the propertyName
      :param mixed $value: the value
      
   .. php:method:: clean(string propertyName, array allowedValues)
   
      Cleans a single property by the given allowed list. First fallback
      is the default data list. If this list does also not contain an
      allowed value, the first value from the allowed list is taken.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Module/ModuleData.php#L77>`__.
      
      :param string $propertyName: the propertyName
      :param array $allowedValues: the allowedValues
      :returntype: bool
      :returns: True if something has been cleaned up
      
   .. php:method:: cleanUp(array allowedData, bool useKeys = true)
   
      Cleans up all module data, which are defined in the
      given allowed data list. Usually called with $MOD_MENU.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Module/ModuleData.php#L107>`__.
      
      :param array $allowedData: the allowedData
      :param bool $useKeys: the useKeys, default: true
      :returntype: bool
      
   .. php:method:: toArray()
   
      
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/backend/Classes/Module/ModuleData.php#L121>`__.
      
      :returntype: array
