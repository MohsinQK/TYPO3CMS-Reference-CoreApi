.. Generated by https://github.com/linawolf/t3docs_restructured_api_tools 
.. php:namespace::  TYPO3\CMS\Scheduler\Task

.. php:class:: abstract AbstractTask

   This is the base class for all Scheduler tasks
   It's an abstract class, not designed to be instantiated directly
   All Scheduler tasks should inherit from this class
   
   See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php>`__.

   .. php:const:: TYPE_SINGLE
   
      :php:`1`, type integer
      
      .. php:const:: TYPE_RECURRING
   
      :php:`2`, type integer
      
      
   
   .. php:method:: execute()
   
      This is the main method that is called when a task is executed
      It MUST be implemented by all classes inheriting from this one
      Note that there is no error handling, errors and failures are expected
      to be handled and logged by the client implementations.
      
      Should return TRUE on successful execution, FALSE on error.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L111>`__.
      
      
   .. php:method:: getAdditionalInformation()
   
      This method is designed to return some additional information about the task,
      that may help to set it apart from other tasks from the same class
      This additional information is used - for example - in the Scheduler's BE module
      This method should be implemented in most task classes
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L121>`__.
      
      
   .. php:method:: setTaskUid(int $id)
   
      This method is used to set the unique id of the task
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L131>`__.
      
      :param int $id: Primary key (from the database record) of the scheduled task
      
   .. php:method:: getTaskUid()
   
      This method returns the unique id of the task
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L141>`__.
      
      :returntype: int
      :returns: The id of the task
      
   .. php:method:: getTaskTitle()
   
      This method returns the title of the scheduler task
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L151>`__.
      
      
   .. php:method:: getTaskDescription()
   
      This method returns the description of the scheduler task
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L161>`__.
      
      
   .. php:method:: getTaskClassName()
   
      This method returns the class name of the scheduler task
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L171>`__.
      
      
   .. php:method:: isDisabled()
   
      This method returns the disable status of the task
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L181>`__.
      
      
   .. php:method:: setDisabled(bool $flag)
   
      This method is used to set the disable status of the task
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L191>`__.
      
      :param bool $flag: TRUE if task should be disabled, FALSE otherwise
      
   .. php:method:: setRunOnNextCronJob(bool $flag)
   
      This method set the flag for next cron job execution
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L205>`__.
      
      :param bool $flag: TRUE if task should run with the next cron job, FALSE otherwise
      
   .. php:method:: getRunOnNextCronJob()
   
      This method returns the run on next cron job status of the task
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L215>`__.
      
      
   .. php:method:: setExecutionTime(int $timestamp)
   
      This method is used to set the timestamp corresponding to the next execution time of the task
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L225>`__.
      
      :param int $timestamp: Timestamp of next execution
      
   .. php:method:: getTaskGroup()
   
      This method returns the task group (uid) of the task
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L235>`__.
      
      
   .. php:method:: setTaskGroup(int $taskGroup)
   
      This method is used to set the task group (uid) of the task
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L245>`__.
      
      :param int $taskGroup: Uid of task group
      
   .. php:method:: getExecutionTime()
   
      This method returns the timestamp corresponding to the next execution time of the task
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L255>`__.
      
      
   .. php:method:: setDescription(string $description)
   
      This method is used to set the description of the task
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L265>`__.
      
      :param string $description: Description
      
   .. php:method:: getDescription()
   
      This method returns the description of the task
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L275>`__.
      
      
   .. php:method:: setScheduler()
   
      Sets the internal reference to the singleton instance of the Scheduler
      and the logger instance in case it was unserialized
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L284>`__.
      
      
   .. php:method:: unsetScheduler()
   
      Unsets the internal reference to the singleton instance of the Scheduler
      and the logger instance.
      
      This is done before a task is serialized, so that the scheduler instance
      and the logger instance are not saved to the database
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L296>`__.
      
      
   .. php:method:: registerSingleExecution(int $timestamp)
   
      Registers a single execution of the task
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L307>`__.
      
      :param int $timestamp: Timestamp of the next execution
      
   .. php:method:: registerRecurringExecution(int $start, int $interval, int $end, bool $multiple, string $cron_cmd)
   
      Registers a recurring execution of the task
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L329>`__.
      
      :param int $start: The first date/time where this execution should occur (timestamp)
      :param int $interval: Execution interval in seconds
      :param int $end: The last date/time where this execution should occur (timestamp)
      :param bool $multiple: Set to FALSE if multiple executions of this task are not permitted in parallel
      :param string $cron_cmd: Used like in crontab (minute hour day month weekday)
      
   .. php:method:: setExecution(\Execution $execution)
   
      Sets the internal execution object
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L354>`__.
      
      :param \Execution $execution: The execution to add
      
   .. php:method:: getExecution()
   
      Returns the execution object
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L364>`__.
      
      
   .. php:method:: getNextDueExecution()
   
      Returns the timestamp for next due execution of the task
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L374>`__.
      
      
   .. php:method:: areMultipleExecutionsAllowed()
   
      Returns TRUE if several runs of the task are allowed concurrently
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L385>`__.
      
      
   .. php:method:: isExecutionRunning()
   
      Returns TRUE if an instance of the task is already running
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L395>`__.
      
      
   .. php:method:: markExecution()
   
      This method adds current execution to the execution list
      It also logs the execution time and mode
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L421>`__.
      
      
   .. php:method:: unmarkExecution(int $executionID, \Throwable $e)
   
      Removes given execution from list
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L469>`__.
      
      :param int $executionID: Id of the execution to remove.
      :param \Throwable $e: An exception to signal a failed execution
      
   .. php:method:: unmarkAllExecutions()
   
      Clears all marked executions
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L536>`__.
      
      
   .. php:method:: save()
   
      Saves the details of the task to the database.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L561>`__.
      
      
   .. php:method:: stop()
   
      Stops the task, by replacing the execution object by an empty one
      NOTE: the task still needs to be saved after that
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L570>`__.
      
      
   .. php:method:: remove()
   
      Removes the task totally from the system.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L578>`__.
      
      
   .. php:method:: getType()
   
      Guess task type from the existing information
      If an interval or a cron command is defined, it's a recurring task
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L589>`__.
      
      
   .. php:method:: setLogger()
   
      Sets a logger.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/scheduler/Classes/Task/AbstractTask.php#L21>`__.
