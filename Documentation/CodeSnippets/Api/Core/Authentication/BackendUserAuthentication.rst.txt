.. Generated by https://github.com/linawolf/t3docs_restructured_api_tools 
.. php:namespace::  TYPO3\CMS\Core\Authentication

.. php:class:: BackendUserAuthentication

   TYPO3 backend user authentication
   Contains most of the functions used for checking permissions, authenticating users,
   setting up the user, and API for user from outside.
   
   This class contains the configuration of the database fields used plus some
   functions for the authentication process of backend users.
   
   See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php>`__.

   .. php:const:: ROLE_SYSTEMMAINTAINER
   
      :php:`'systemMaintainer'`, type string
      
      
   .. php:attr:: usergroup_column
   
      Should be set to the usergroup-column (id-list) in the user-record
      
      
   .. php:attr:: usergroup_table
   
      The name of the group-table
      
      
   .. php:attr:: groupData
   
      holds lists of eg. tables, fields and other values related to the permission-system. See fetchGroupData
      
      
   .. php:attr:: userGroupsUID
   
      This array holds the uid's of the groups in the listed order
      
      
   .. php:attr:: workspace
   
      User workspace.
      
      -99 is ERROR (none available)
      0 is online
      >0 is custom workspaces
      
      
   .. php:attr:: workspaceRec
   
      Custom workspace record if any
      
      
   .. php:attr:: errorMsg
   
      Contains last error message
      
      
   .. php:attr:: user_table
   
      Table in database with user data
      
      
   .. php:attr:: username_column
   
      Column for login-name
      
      
   .. php:attr:: userident_column
   
      Column for password
      
      
   .. php:attr:: userid_column
   
      Column for user-id
      
      
   .. php:attr:: lastLogin_column
   
      
   .. php:attr:: enablecolumns
   
      
   .. php:attr:: formfield_uname
   
      Form field with login-name
      
      
   .. php:attr:: formfield_uident
   
      Form field with password
      
      
   .. php:attr:: formfield_status
   
      Form field with status: *'login', 'logout'
      
      
   .. php:attr:: writeStdLog
   
      Decides if the writelog() function is called at login and logout
      
      
   .. php:attr:: writeAttemptLog
   
      If the writelog() functions is called if a login-attempt has be tried without success
      
      
   .. php:attr:: firstMainGroup
   
      
   .. php:attr:: uc_default
   
      User Config Default values:
      The array may contain other fields for configuration.
      
      For this, see "setup" extension and "TSconfig" document (User TSconfig, "setup.[xxx]....")
      Reserved keys for other storage of session data:
      moduleData
      moduleSessionID
      
      
   .. php:attr:: loginType
   
      Login type, used for services.
      
      
   .. php:attr:: name
   
      Session/Cookie name
      
      
   .. php:attr:: checkPid
   
      If set, the user-record must be stored at the page defined by $checkPid_value
      
      
   .. php:attr:: checkPid_value
   
      The page id the user record must be stored at, can also hold a comma separated list of pids
      
      
   .. php:attr:: loginSessionStarted
   
      Will be set to TRUE if the login session is actually written during auth-check.
      
      
   .. php:attr:: user
   
      
   .. php:attr:: userGroups
   
      This array will hold the groups that the user is a member of
      
      
   .. php:attr:: dontSetCookie
   
      Will prevent the setting of the session cookie
      
      
   .. php:attr:: uc
   
      User Settings (= preferences)
      
      
   .. php:method:: isAdmin()
   
      Returns TRUE if user is admin
      Basically this function evaluates if the ->user[admin] field has bit 0 set. If so, user is admin.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L264>`__.
      
      
   .. php:method:: doesUserHaveAccess(array $row, int $perms)
   
      Checks if the permissions is granted based on a page-record ($row) and $perms (binary and'ed)
      
      Bits for permissions, see $perms variable:
      
      1  - Show:             See/Copy page and the pagecontent.
      2  - Edit page:        Change/Move the page, eg. change title, startdate, hidden.
      4  - Delete page:      Delete the page and pagecontent.
      8  - New pages:        Create new pages under the page.
      16 - Edit pagecontent: Change/Add/Delete/Move pagecontent.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L302>`__.
      
      :param array $row: Is the pagerow for which the permissions is checked
      :param int $perms: Is the binary representation of the permission we are going to check. Every bit in this number represents a permission that must be set. See function explanation.
      
   .. php:method:: isInWebMount(int|array $idOrRow, string $readPerms)
   
      Checks if the page id or page record ($idOrRow) is found within the webmounts set up for the user.
      
      This should ALWAYS be checked for any page id a user works with, whether it's about reading, writing or whatever.
      The point is that this will add the security that a user can NEVER touch parts outside his mounted
      pages in the page tree. This is otherwise possible if the raw page permissions allows for it.
      So this security check just makes it easier to make safe user configurations.
      If the user is admin then it returns "1" right away
      Otherwise the function will return the uid of the webmount which was first found in the rootline of the input page $id
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L322>`__.
      
      :param int|array $idOrRow: Page ID or full page record to check
      :param string $readPerms: Content of "->getPagePermsClause(1)" (read-permissions). If not set, they will be internally calculated (but if you have the correct value right away you can save that database lookup!)
      
   .. php:method:: modAccess(array $conf)
   
      Checks access to a backend module
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L385>`__.
      
      :param array $conf: module configuration
      
   .. php:method:: isSystemMaintainer()
   
      Checks if the user is in the valid list of allowed system maintainers. if the list is not set,
      then all admins are system maintainers. If the list is empty, no one is system maintainer (good for production
      systems). If the currently logged in user is in "switch user" mode, this method will return false.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L432>`__.
      
      :returntype: bool
      
   .. php:method:: calcPerms(array $row)
   
      Returns a combined binary representation of the current users permissions for the page-record, $row.
      
      The perms for user, group and everybody is OR'ed together (provided that the page-owner is the user
      and for the groups that the user is a member of the group.
      If the user is admin, 31 is returned	(full permissions for all five flags)
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L544>`__.
      
      :param array $row: Input page row with all perms_* fields available.
      
   .. php:method:: check(string $type, string $value)
   
      Returns TRUE if the $value is found in the list in a $this->groupData[] index pointed to by $type (array key).
      
      Can thus be users to check for modules, exclude-fields, select/modify permissions for tables etc.
      If user is admin TRUE is also returned
      Please see the document Inside TYPO3 for examples.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L601>`__.
      
      :param string $type: The type value; "webmounts", "filemounts", "pagetypes_select", "tables_select", "tables_modify", "non_exclude_fields", "modules", "available_widgets", "mfa_providers"
      :param string $value: String to search for in the groupData-list
      
   .. php:method:: checkAuthMode(string $table, string $field, string $value)
   
      Checking the authMode of a select field with authMode set
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L615>`__.
      
      :param string $table: Table name
      :param string $field: Field name (must be configured in TCA and of type "select" with authMode set!)
      :param string $value: Value to evaluation (single value, must not contain any of the chars ":,|")
      
   .. php:method:: checkLanguageAccess(int $langValue)
   
      Checking if a language value (-1, 0 and >0) is allowed to be edited by the user.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L648>`__.
      
      :param int $langValue: Language value to evaluate
      
   .. php:method:: checkFullLanguagesAccess(string $table, array $record)
   
      Check if user has access to all existing localizations for a certain record
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L668>`__.
      
      :param string $table: The table
      :param array $record: The current record
      
   .. php:method:: mayMakeShortcut()
   
      Returns TRUE if the BE_USER is allowed to *create* shortcuts in the backend modules
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L812>`__.
      
      
   .. php:method:: getTSConfig()
   
      Returns full parsed user TSconfig array, merged with TSconfig from groups.
      
      Example:
      [
          'options.' => [
              'fooEnabled' => '0',
              'fooEnabled.' => [
                  'tt_content' => 1,
              ],
          ],
      ]
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L977>`__.
      
      
   .. php:method:: returnWebmounts()
   
      Returns an array with the webmounts.
      
      If no webmounts, and empty array is returned.
      Webmounts permissions are checked in fetchGroupData()
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L989>`__.
      
      
   .. php:method:: setWebmounts(array $mountPointUids, bool $append)
   
      Initializes the given mount points for the current Backend user.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L1000>`__.
      
      :param array $mountPointUids: Page UIDs that should be used as web mountpoints
      :param bool $append: If TRUE the given mount point will be appended. Otherwise the current mount points will be replaced.
      
   .. php:method:: jsConfirmation(int $bitmask)
   
      Returns TRUE or FALSE, depending if an alert popup (a javascript confirmation) should be shown
      call like $GLOBALS['BE_USER']->jsConfirmation($BITMASK).
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L1048>`__.
      
      :param int $bitmask: Bitmask, one of \TYPO3\CMS\Core\Type\Bitmask\JsConfirmation
      
   .. php:method:: getCategoryMountPoints()
   
      Returns an array of category mount points. The category permissions from BE Groups
      are also taken into consideration and are merged into User permissions.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L1301>`__.
      
      
   .. php:method:: getFileStorages()
   
      Returns an array with the filemounts for the user.
      
      Each filemount is represented with an array of a "name", "path" and "type".
      If no filemounts an empty array is returned.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L1483>`__.
      
      
   .. php:method:: evaluateUserSpecificFileFilterSettings()
   
      Adds filters based on what the user has set
      this should be done in this place, and called whenever needed,
      but only when needed
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L1497>`__.
      
      
   .. php:method:: getFilePermissions()
   
      Returns the information about file permissions.
      
      Previously, this was stored in the DB field fileoper_perms now it is file_permissions.
      Besides it can be handled via userTSconfig
      
      permissions.file.default {
      addFile = 1
      readFile = 1
      writeFile = 1
      copyFile = 1
      moveFile = 1
      renameFile = 1
      deleteFile = 1
      
      addFolder = 1
      readFolder = 1
      writeFolder = 1
      copyFolder = 1
      moveFolder = 1
      renameFolder = 1
      deleteFolder = 1
      recursivedeleteFolder = 1
      }
      
      # overwrite settings for a specific storageObject
      permissions.file.storage.StorageUid {
      readFile = 1
      recursivedeleteFolder = 0
      }
      
      Please note that these permissions only apply, if the storage has the
      capabilities (browseable, writable), and if the driver allows for writing etc
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L1540>`__.
      
      
   .. php:method:: getFilePermissionsForStorage()
   
      Gets the file permissions for a storage
      by merging any storage-specific permissions for a
      storage with the default settings.
      
      Admin users will always get the default settings.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L1598>`__.
      
      
   .. php:method:: getDefaultUploadFolder(int $pid, string $table, string $field)
   
      Returns a \TYPO3\CMS\Core\Resource\Folder object that is used for uploading
      files by default.
      
      This is used for RTE and its magic images, as well as uploads
      in the TCEforms fields.
      
      The default upload folder for a user is the defaultFolder on the first
      filestorage/filemount that the user can access and to which files are allowed to be added
      however, you can set the users' upload folder like this:
      
      options.defaultUploadFolder = 3:myfolder/yourfolder/
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L1632>`__.
      
      :param int $pid: PageUid
      :param string $table: Table name
      :param string $field: Field name
      
   .. php:method:: getDefaultUploadTemporaryFolder()
   
      Returns a \TYPO3\CMS\Core\Resource\Folder object that could be used for uploading
      temporary files in user context. The folder _temp_ below the default upload folder
      of the user is used.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L1699>`__.
      
      
   .. php:method:: writelog(int $type, int $action, int $error, int $details_nr, string $details, array $data, string $tablename, int|string $recuid, int|string $recpid, int $event_pid, string $NEWid, int $userId)
   
      Writes an entry in the logfile/table
      Documentation in "TYPO3 Core API"
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L1978>`__.
      
      :param int $type: Denotes which module that has submitted the entry. See "TYPO3 Core API". Use "4" for extensions.
      :param int $action: Denotes which specific operation that wrote the entry. Use "0" when no sub-categorizing applies
      :param int $error: Flag. 0 = message, 1 = error (user problem), 2 = System Error (which should not happen), 3 = security notice (admin)
      :param int $details_nr: The message number. Specific for each $type and $action. This will make it possible to translate errormessages to other languages
      :param string $details: Default text that follows the message (in english!). Possibly translated by identification through type/action/details_nr
      :param array $data: Data that follows the log. Might be used to carry special information. If an array the first 5 entries (0-4) will be sprintf'ed with the details-text
      :param string $tablename: Table name. Special field used by tce_main.php.
      :param int|string $recuid: Record UID. Special field used by tce_main.php.
      :param int|string $recpid: Record PID. Special field used by tce_main.php. OBSOLETE
      :param int $event_pid: The page_uid (pid) where the event occurred. Used to select log-content for specific pages.
      :param string $NEWid: Special field used by tce_main.php. NEWid string of newly created records.
      :param int $userId: Alternative Backend User ID (used for logging login actions where this is not yet known).
      
   .. php:method:: getCookieName()
   
      Getter for the cookie name
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L2046>`__.
      
      
   .. php:method:: backendCheckLogin()
   
      Check if user is logged in and if so, call ->fetchGroupData() to load group information and
      access lists of all kind, further check IP, set the ->uc array.
      
      If no user is logged in the default behaviour is to exit with an error message.
      This function is called right after ->start() in fx. the TYPO3 Bootstrap.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L2064>`__.
      
      
   .. php:method:: logoff()
   
      Logs out the current user and clears the form protection tokens.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L2200>`__.
      
      
   .. php:method:: start()
   
      Starts a user session
      Typical configurations will:
      a) check if session cookie was set and if not, set one,
      b) check if a password/username was sent and if so, try to authenticate the user
      c) Lookup a session attached to a user and check timeout etc.
      
      d) Garbage collection, setting of no-cache headers.
      If a user is authenticated the database record of the user (array) will be set in the ->user internal variable.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L254>`__.
      
      
   .. php:method:: appendCookieToResponse()
   
      Used to apply a cookie to a PSR-7 Response.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L295>`__.
      
      :returntype: Psr\\Http\\Message\\ResponseInterface
      
   .. php:method:: createUserSession(array $tempuser)
   
      Creates a user session record and returns its values.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L755>`__.
      
      :param array $tempuser: User data array
      :returntype: TYPO3\\CMS\\Core\\Session\\UserSession
      :returns: The session data for the newly created session.
      
   .. php:method:: removeCookie(string|null $cookieName)
   
      Empty / unset the cookie
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L877>`__.
      
      :param string|null $cookieName: usually, this is $this->name
      
   .. php:method:: isCookieSet()
   
      Returns whether this request is going to set a cookie
      or a cookie was already found in the system
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L898>`__.
      
      
   .. php:method:: writeUC()
   
      This writes $this->>uc to the user-record. This is a way of providing session-data.
      
      You can fetch the data again through $this->uc in this class!
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L952>`__.
      
      
   .. php:method:: unpack_uc()
   
      Unserializes the user configuration from the user record into $this->>uc
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L971>`__.
      
      
   .. php:method:: pushModuleData(string $module, mixed $data, bool $dontPersistImmediately)
   
      Stores data for a module.
      
      The data is stored with the session ID, so you can even check upon retrieval
      if the module data is from a previous session or from the current session.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L990>`__.
      
      :param string $module: Is the identifier of the module, e.g. "web_info"
      :param mixed $data: Is the data you want to store for that module (array, string, ...)
      :param bool $dontPersistImmediately: If set, then the ->uc array (which carries all kinds of user data) is NOT written immediately, but must be written by some subsequent call.
      
   .. php:method:: getModuleData(string $module, string $type)
   
      Gets module data for a module (from a loaded ->uc array)
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L1010>`__.
      
      :param string $module: Is the identifier of the module, e.g. "web_info"
      :param string $type: If $type = 'ses' then module data is returned only if it was stored in the current session, otherwise data from a previous session will be returned (if available).
      :returntype: mixed
      :returns: The module data if available: $this->uc['moduleData'][$module];
      
   .. php:method:: getSessionData(string $key)
   
      Returns the session data stored for $key.
      
      The data will last only for this login session since it is stored in the user session.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L1031>`__.
      
      :param string $key: The key associated with the session data
      
   .. php:method:: setSessionData(string $key, mixed $data)
   
      Set session data by key.
      
      The data will last only for this login session since it is stored in the user session.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L1043>`__.
      
      :param string $key: A non empty string to store the data under
      :param mixed $data: Data store store in session
      
   .. php:method:: setAndSaveSessionData(string $key, mixed $data)
   
      Sets the session data ($data) for $key and writes all session data (from ->user['ses_data']) to the database.
      
      The data will last only for this login session since it is stored in the session table.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L1055>`__.
      
      :param string $key: Pointer to an associative key in the session data array which is stored serialized in the field "ses_data" of the session table.
      :param mixed $data: The data to store in index $key
      
   .. php:method:: isActiveLogin(Psr\\Http\\Message\\ServerRequestInterface request)
   
      
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L1087>`__.
      
      :param Psr\\Http\\Message\\ServerRequestInterface $request: the request
      :returntype: bool
      
   .. php:method:: getSession()
   
      
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L1273>`__.
      
      :returntype: TYPO3\\CMS\\Core\\Session\\UserSession
      
   .. php:method:: setLogger()
   
      Sets a logger.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Authentication/BackendUserAuthentication.php#L21>`__.
