.. Generated by https://github.com/linawolf/t3docs_restructured_api_tools 
.. php:namespace::  TYPO3\CMS\Core\Database\Schema\Types

.. php:class:: SetType

   Type that maps a TYPE field.
   
   See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Schema/Types/SetType.php>`__.

   .. php:const:: TYPE
   
      :php:`'set'`, type string
      
      
   .. php:method:: getSQLDeclaration(array $fieldDeclaration, \Doctrine\DBAL\Platforms\AbstractPlatform $platform)
   
      Gets the SQL declaration snippet for a field of this type.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Schema/Types/SetType.php#L37>`__.
      
      :param array $fieldDeclaration: The field declaration.
      :param \Doctrine\DBAL\Platforms\AbstractPlatform $platform: The currently used database platform.
      :returntype: string
      
   .. php:method:: getName()
   
      Gets the name of this type.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Schema/Types/SetType.php#L49>`__.
      
      :returntype: string
      
   .. php:method:: convertToDatabaseValue(mixed $value, \AbstractPlatform $platform)
   
      Converts a value from its PHP representation to its database representation
      of this type.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Schema/Types/SetType.php#L70>`__.
      
      :param mixed $value: The value to convert.
      :param \AbstractPlatform $platform: The currently used database platform.
      
   .. php:method:: convertToPHPValue(mixed $value, \AbstractPlatform $platform)
   
      Converts a value from its database representation to its PHP representation
      of this type.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Schema/Types/SetType.php#L86>`__.
      
      :param mixed $value: The value to convert.
      :param \AbstractPlatform $platform: The currently used database platform.
      
   .. php:method:: getTypeRegistry()
   
      
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Schema/Types/SetType.php#L110>`__.
      
      :returntype: Doctrine\\DBAL\\Types\\TypeRegistry
      
   .. php:method:: getType(string $name)
   
      Factory method to create type instances.
      
      Type instances are implemented as flyweights.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Schema/Types/SetType.php#L140>`__.
      
      :param string $name: The name of the type (as returned by getName()).
      
   .. php:method:: addType(string $name, class-string<\Type> $className)
   
      Adds a custom type to the type map.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Schema/Types/SetType.php#L155>`__.
      
      :param string $name: The name of the type. This should correspond to what getName() returns.
      :param class-string<\Type> $className: The class name of the custom type.
      
   .. php:method:: hasType(string $name)
   
      Checks if exists support for a type.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Schema/Types/SetType.php#L167>`__.
      
      :param string $name: The name of the type.
      
   .. php:method:: overrideType()
   
      Overrides an already defined type to use a different implementation.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Schema/Types/SetType.php#L182>`__.
      
      
   .. php:method:: getBindingType()
   
      Gets the (preferred) binding type for values of this type that
      can be used when binding parameters to prepared statements.
      
      This method should return one of the {@see \ParameterType} constants.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Schema/Types/SetType.php#L195>`__.
      
      
   .. php:method:: getTypesMap()
   
      Gets the types array map which holds all registered types and the corresponding
      type class
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Schema/Types/SetType.php#L206>`__.
      
      
   .. php:method:: canRequireSQLConversion()
   
      Does working with this column require SQL conversion functions?
      
      This is a metadata function that is required for example in the ORM.
      Usage of {@see \convertToDatabaseValueSQL} and
      {@see \convertToPHPValueSQL} works for any type and mostly
      does nothing. This method can additionally be used for optimization purposes.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Schema/Types/SetType.php#L229>`__.
      
      
   .. php:method:: convertToDatabaseValueSQL()
   
      Modifies the SQL expression (identifier, parameter) to convert to a database value.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Schema/Types/SetType.php#L241>`__.
      
      
   .. php:method:: convertToPHPValueSQL()
   
      Modifies the SQL expression (identifier, parameter) to convert to a PHP value.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Schema/Types/SetType.php#L254>`__.
      
      
   .. php:method:: getMappedDatabaseTypes(Doctrine\\DBAL\\Platforms\\AbstractPlatform platform)
   
      Gets an array of database types that map to this Doctrine type.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Schema/Types/SetType.php#L264>`__.
      
      :param Doctrine\\DBAL\\Platforms\\AbstractPlatform $platform: the platform
      
   .. php:method:: requiresSQLCommentHint(Doctrine\\DBAL\\Platforms\\AbstractPlatform platform)
   
      If this Doctrine Type maps to an already mapped database type,
      reverse schema engineering can't tell them apart. You need to mark
      one of those types as commented, which will have Doctrine use an SQL
      comment to typehint the actual Doctrine Type.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Schema/Types/SetType.php#L277>`__.
      
      :param Doctrine\\DBAL\\Platforms\\AbstractPlatform $platform: the platform
