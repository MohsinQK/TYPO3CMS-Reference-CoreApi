.. Generated by https://github.com/linawolf/t3docs_restructured_api_tools 
.. php:namespace::  TYPO3\CMS\Core\Database\Query\Expression

.. php:class:: ExpressionBuilder

   ExpressionBuilder class is responsible to dynamically create SQL query parts.
   
   It takes care building query conditions while ensuring table and column names
   are quoted within the created expressions / SQL fragments. It is a facade to
   the actual Doctrine ExpressionBuilder.
   
   The ExpressionBuilder is used within the context of the QueryBuilder to ensure
   queries are being build based on the requirements of the database platform in
   use.
   
   See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/Expression/ExpressionBuilder.php>`__.

   .. php:const:: EQ
   
      :php:`'='`, type string
      
      .. php:const:: NEQ
   
      :php:`'<>'`, type string
      
      .. php:const:: LT
   
      :php:`'<'`, type string
      
      .. php:const:: LTE
   
      :php:`'<='`, type string
      
      .. php:const:: GT
   
      :php:`'>'`, type string
      
      .. php:const:: GTE
   
      :php:`'>='`, type string
      
      .. php:const:: QUOTE_NOTHING
   
      :php:`0`, type integer
      
      .. php:const:: QUOTE_IDENTIFIER
   
      :php:`1`, type integer
      
      .. php:const:: QUOTE_PARAMETER
   
      :php:`2`, type integer
      
      
   
   .. php:method:: andX(\CompositeExpression|string ...$expressions)
   
      Creates a conjunction of the given boolean expressions
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/Expression/ExpressionBuilder.php#L71>`__.
      
      :param \CompositeExpression|string ...$expressions: Optional clause. Requires at least one defined when converting to string.
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\Expression\\CompositeExpression
      
   .. php:method:: orX(\CompositeExpression|string ...$expressions)
   
      Creates a disjunction of the given boolean expressions.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/Expression/ExpressionBuilder.php#L88>`__.
      
      :param \CompositeExpression|string ...$expressions: Optional clause. Requires at least one defined when converting to string.
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\Expression\\CompositeExpression
      
   .. php:method:: and(TYPO3\\CMS\\Core\\Database\\Query\\Expression\\CompositeExpression|string|null expressions)
   
      Creates a conjunction of the given boolean expressions
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/Expression/ExpressionBuilder.php#L100>`__.
      
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\Expression\\CompositeExpression
      
   .. php:method:: or(TYPO3\\CMS\\Core\\Database\\Query\\Expression\\CompositeExpression|string|null expressions)
   
      Creates a disjunction of the given boolean expressions.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/Expression/ExpressionBuilder.php#L108>`__.
      
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\Expression\\CompositeExpression
      
   .. php:method:: comparison(mixed $leftExpression, string $operator, mixed $rightExpression)
   
      Creates a comparison expression.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/Expression/ExpressionBuilder.php#L122>`__.
      
      :param mixed $leftExpression: The left expression.
      :param string $operator: One of the ExpressionBuilder::* constants.
      :param mixed $rightExpression: The right expression.
      :returntype: string
      
   .. php:method:: eq(string $fieldName, mixed $value)
   
      Creates an equality comparison expression with the given arguments.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/Expression/ExpressionBuilder.php#L135>`__.
      
      :param string $fieldName: The fieldname. Will be quoted according to database platform automatically.
      :param mixed $value: The value. No automatic quoting/escaping is done.
      :returntype: string
      
   .. php:method:: neq(string $fieldName, mixed $value)
   
      Creates a non equality comparison expression with the given arguments.
      
      First argument is considered the left expression and the second is the right expression.
      When converted to string, it will generated a <left expr> <> <right expr>. Example:
      
          [php]
          // u.id <> 1
          $q->where($q->expr()->neq('u.id', '1'));
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/Expression/ExpressionBuilder.php#L154>`__.
      
      :param string $fieldName: The fieldname. Will be quoted according to database platform automatically.
      :param mixed $value: The value. No automatic quoting/escaping is done.
      :returntype: string
      
   .. php:method:: lt(string $fieldName, mixed $value)
   
      Creates a lower-than comparison expression with the given arguments.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/Expression/ExpressionBuilder.php#L167>`__.
      
      :param string $fieldName: The fieldname. Will be quoted according to database platform automatically.
      :param mixed $value: The value. No automatic quoting/escaping is done.
      :returntype: string
      
   .. php:method:: lte(string $fieldName, mixed $value)
   
      Creates a lower-than-equal comparison expression with the given arguments.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/Expression/ExpressionBuilder.php#L180>`__.
      
      :param string $fieldName: The fieldname. Will be quoted according to database platform automatically.
      :param mixed $value: The value. No automatic quoting/escaping is done.
      :returntype: string
      
   .. php:method:: gt(string $fieldName, mixed $value)
   
      Creates a greater-than comparison expression with the given arguments.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/Expression/ExpressionBuilder.php#L193>`__.
      
      :param string $fieldName: The fieldname. Will be quoted according to database platform automatically.
      :param mixed $value: The value. No automatic quoting/escaping is done.
      :returntype: string
      
   .. php:method:: gte(string $fieldName, mixed $value)
   
      Creates a greater-than-equal comparison expression with the given arguments.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/Expression/ExpressionBuilder.php#L206>`__.
      
      :param string $fieldName: The fieldname. Will be quoted according to database platform automatically.
      :param mixed $value: The value. No automatic quoting/escaping is done.
      :returntype: string
      
   .. php:method:: isNull(string $fieldName)
   
      Creates an IS NULL expression with the given arguments.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/Expression/ExpressionBuilder.php#L218>`__.
      
      :param string $fieldName: The fieldname. Will be quoted according to database platform automatically.
      :returntype: string
      
   .. php:method:: isNotNull(string $fieldName)
   
      Creates an IS NOT NULL expression with the given arguments.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/Expression/ExpressionBuilder.php#L230>`__.
      
      :param string $fieldName: The fieldname. Will be quoted according to database platform automatically.
      :returntype: string
      
   .. php:method:: like(string $fieldName, mixed $value)
   
      Creates a LIKE() comparison expression with the given arguments.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/Expression/ExpressionBuilder.php#L243>`__.
      
      :param string $fieldName: The fieldname. Will be quoted according to database platform automatically.
      :param mixed $value: Argument to be used in LIKE() comparison. No automatic quoting/escaping is done.
      :returntype: string
      
   .. php:method:: notLike(string $fieldName, mixed $value)
   
      Creates a NOT LIKE() comparison expression with the given arguments.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/Expression/ExpressionBuilder.php#L256>`__.
      
      :param string $fieldName: The fieldname. Will be quoted according to database platform automatically.
      :param mixed $value: Argument to be used in NOT LIKE() comparison. No automatic quoting/escaping is done.
      :returntype: string
      
   .. php:method:: in(string $fieldName, string|array $value)
   
      Creates a IN () comparison expression with the given arguments.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/Expression/ExpressionBuilder.php#L270>`__.
      
      :param string $fieldName: The fieldname. Will be quoted according to database platform automatically.
      :param string|array $value: The placeholder or the array of values to be used by IN() comparison.
      No automatic quoting/escaping is done.
      :returntype: string
      
   .. php:method:: notIn(string $fieldName, string|array $value)
   
      Creates a NOT IN () comparison expression with the given arguments.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/Expression/ExpressionBuilder.php#L288>`__.
      
      :param string $fieldName: The fieldname. Will be quoted according to database platform automatically.
      :param string|array $value: The placeholder or the array of values to be used by NOT IN() comparison.
      No automatic quoting/escaping is done.
      :returntype: string
      
   .. php:method:: inSet(string $fieldName, string $value, bool $isColumn)
   
      Returns a comparison that can find a value in a list field (CSV).
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/Expression/ExpressionBuilder.php#L307>`__.
      
      :param string $fieldName: The field name. Will be quoted according to database platform automatically.
      :param string $value: Argument to be used in FIND_IN_SET() comparison. No automatic quoting/escaping is done.
      :param bool $isColumn: Set when the value to compare is a column on a table to activate casting
      :returntype: string
      
   .. php:method:: notInSet(string $fieldName, string $value, bool $isColumn)
   
      Returns a comparison that can find a value in a list field (CSV) but is negated.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/Expression/ExpressionBuilder.php#L395>`__.
      
      :param string $fieldName: The field name. Will be quoted according to database platform automatically.
      :param string $value: Argument to be used in FIND_IN_SET() comparison. No automatic quoting/escaping is done.
      :param bool $isColumn: Set when the value to compare is a column on a table to activate casting
      :returntype: string
      
   .. php:method:: bitAnd(string $fieldName, int $value)
   
      Creates a bitwise AND expression with the given arguments.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/Expression/ExpressionBuilder.php#L480>`__.
      
      :param string $fieldName: The fieldname. Will be quoted according to database platform automatically.
      :param int $value: Argument to be used in the bitwise AND operation
      :returntype: string
      
   .. php:method:: min()
   
      Creates a MIN expression for the given field/alias.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/Expression/ExpressionBuilder.php#L506>`__.
      
      :returntype: string
      
   .. php:method:: max()
   
      Creates a MAX expression for the given field/alias.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/Expression/ExpressionBuilder.php#L518>`__.
      
      :returntype: string
      
   .. php:method:: avg()
   
      Creates a AVG expression for the given field/alias.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/Expression/ExpressionBuilder.php#L530>`__.
      
      :returntype: string
      
   .. php:method:: sum()
   
      Creates a SUM expression for the given field/alias.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/Expression/ExpressionBuilder.php#L542>`__.
      
      :returntype: string
      
   .. php:method:: count()
   
      Creates a COUNT expression for the given field/alias.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/Expression/ExpressionBuilder.php#L554>`__.
      
      :returntype: string
      
   .. php:method:: length()
   
      Creates a LENGTH expression for the given field/alias.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/Expression/ExpressionBuilder.php#L566>`__.
      
      :returntype: string
      
   .. php:method:: trim(string $fieldName, int $position, string $char)
   
      Creates a TRIM expression for the given field.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/Expression/ExpressionBuilder.php#L602>`__.
      
      :param string $fieldName: Field name to build expression for
      :param int $position: Either constant out of LEADING, TRAILING, BOTH
      :param string $char: Character to be trimmed (defaults to space)
      
   .. php:method:: literal(mixed $input, string|int|null $type)
   
      Quotes a given input parameter.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/Expression/ExpressionBuilder.php#L619>`__.
      
      :param mixed $input: The parameter to be quoted.
      :param string|int|null $type: The type of the parameter.
