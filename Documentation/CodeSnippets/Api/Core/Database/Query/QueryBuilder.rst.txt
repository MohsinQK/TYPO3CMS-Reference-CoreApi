.. Generated by https://github.com/linawolf/t3docs_restructured_api_tools 
.. php:namespace::  TYPO3\CMS\Core\Database\Query

.. php:class:: QueryBuilder

   Object oriented approach to building SQL queries.
   
   It's a facade to the Doctrine DBAL QueryBuilder that implements PHP7 type hinting and automatic
   quoting of table and column names.
   
   <code>
   $query->select('aField', 'anotherField')
         ->from('aTable')
         ->where($query->expr()->eq('aField', 1))
         ->andWhere($query->expr()->gte('anotherField',10'))
         ->execute()
   </code>
   
   Additional functionality included is support for COUNT() and TRUNCATE() statements.
   
   See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php>`__.

   
   .. php:method:: getRestrictions()
   
      
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L112>`__.
      
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\Restriction\\QueryRestrictionContainerInterface
      
   .. php:method:: setRestrictions()
   
      
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L120>`__.
      
      
   .. php:method:: limitRestrictionsToTables()
   
      Limits ALL currently active restrictions of the restriction container to the table aliases given
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L137>`__.
      
      
   .. php:method:: resetRestrictions()
   
      Re-apply default restrictions
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L145>`__.
      
      
   .. php:method:: expr()
   
      Gets an ExpressionBuilder used for object-oriented construction of query expressions.
      
      This producer method is intended for convenient inline usage. Example:
      
      For more complex expression construction, consider storing the expression
      builder object in a local variable.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L159>`__.
      
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\Expression\\ExpressionBuilder
      
   .. php:method:: getConnection()
   
      Gets the associated DBAL Connection for this query builder.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L180>`__.
      
      :returntype: TYPO3\\CMS\\Core\\Database\\Connection
      
   .. php:method:: prepare()
   
      Create prepared statement out of QueryBuilder instance.
      
      doctrine/dbal does not provide support for prepared statement
      in QueryBuilder, but as TYPO3 uses the API throughout the code
      via QueryBuilder, so the functionality of
      prepared statements for multiple executions is added.
      
      You should be aware that this method will throw a named
      'UnsupportedPreparedStatementParameterTypeException()'
      exception, if 'PARAM_INT_ARRAY' or 'PARAM_STR_ARRAY' is set,
      as this is not supported for prepared statements directly.
      
      NamedPlaceholder are not supported, and if one or
      more are set a 'NamedParameterNotSupportedForPreparedStatementException'
      will be thrown.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L226>`__.
      
      :returntype: Doctrine\\DBAL\\Statement
      
   .. php:method:: execute()
   
      Executes this query using the bound parameters and their types.
      
      doctrine/dbal decided to split execute() into executeQuery() and
      executeStatement() for doctrine/dbal:^3.0, like it was done on
      connection level already, thus these methods are added to this
      decorator class also as preparation for extension authors, that
      they are able to write code which is compatible across two core
      versions and avoid deprecation warning. Additional this will ease
      backports without the need to switch between execute() and executeQuery().
      
      It is recommended to use directly executeQuery() for 'SELECT' and
      executeStatement() for 'INSERT', 'UPDATE' and 'DELETE' queries.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L267>`__.
      
      
   .. php:method:: executeQuery()
   
      Executes an SQL query (SELECT) and returns a Result.
      
      doctrine/dbal decided to split execute() into executeQuery() and
      executeStatement() for doctrine/dbal:^3.0, like it was done on
      connection level already, thus these methods are added to this
      decorator class also as preparation for extension authors, that
      they are able to write code which is compatible across two core
      versions and avoid deprecation warning. Additional this will ease
      backport without the need to switch if execute() is not used anymore.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L290>`__.
      
      :returntype: Doctrine\\DBAL\\Result
      
   .. php:method:: executeStatement()
   
      Executes an SQL statement (INSERT, UPDATE and DELETE) and returns
      the number of affected rows.
      
      doctrine/dbal decided to split execute() into executeQuery() and
      executeStatement() for doctrine/dbal:^3.0, like it was done on
      connection level already, thus these methods are added to this
      decorator class also as preparation for extension authors, that
      they are able to write code which is compatible across two core
      versions and avoid deprecation warning. Additional this will ease
      backport without the need to switch if execute() is not used anymore.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L318>`__.
      
      :returntype: int
      :returns: The number of affected rows.
      
   .. php:method:: getSQL()
   
      Gets the complete SQL string formed by the current specifications of this QueryBuilder.
      
      If the statement is a SELECT TYPE query restrictions based on TCA settings will
      automatically be applied based on the current QuerySettings.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L331>`__.
      
      :returntype: string
      :returns: The SQL query string.
      
   .. php:method:: setParameter(string|int $key, mixed $value, int|null $type)
   
      Sets a query parameter for the query being constructed.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L358>`__.
      
      :param string|int $key: The parameter position or name.
      :param mixed $value: The parameter value.
      :param int|null $type: One of the Connection::PARAM_* constants.
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: setParameters(array $params, array $types)
   
      Sets a collection of query parameters for the query being constructed.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L373>`__.
      
      :param array $params: The query parameters to set.
      :param array $types: The query parameters types to set.
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: getParameters()
   
      Gets all defined query parameters for the query being constructed indexed by parameter index or name.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L385>`__.
      
      :returntype: array
      :returns: The currently defined query parameters indexed by parameter index or name.
      
   .. php:method:: getParameter(string|int $key)
   
      Gets a (previously set) query parameter of the query being constructed.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L397>`__.
      
      :param string|int $key: The key (index or name) of the bound parameter.
      
   .. php:method:: getParameterTypes()
   
      Gets all defined query parameter types for the query being constructed indexed by parameter index or name.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L407>`__.
      
      :returntype: array
      :returns: The currently defined query parameter types indexed by parameter index or name.
      
   .. php:method:: getParameterType(string|int $key)
   
      Gets a (previously set) query parameter type of the query being constructed.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L419>`__.
      
      :param string|int $key: The key (index or name) of the bound parameter type.
      
   .. php:method:: setFirstResult(int $firstResult)
   
      Sets the position of the first result to retrieve (the "offset").
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L431>`__.
      
      :param int $firstResult: The first result to return.
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: getFirstResult()
   
      Gets the position of the first result the query object was set to retrieve (the "offset").
      
      Returns NULL if {@link setFirstResult} was not applied to this QueryBuilder.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L444>`__.
      
      :returntype: int
      :returns: The position of the first result.
      
   .. php:method:: setMaxResults(int $maxResults)
   
      Sets the maximum number of results to retrieve (the "limit").
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L456>`__.
      
      :param int $maxResults: The maximum number of results to retrieve.
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: getMaxResults()
   
      Gets the maximum number of results the query object was set to retrieve (the "limit").
      
      Returns 0 if setMaxResults was not applied to this query builder.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L469>`__.
      
      :returntype: int
      :returns: The maximum number of results.
      
   .. php:method:: add()
   
      Either appends to or replaces a single, generic query part.
      
      The available parts are: 'select', 'from', 'set', 'where',
      'groupBy', 'having' and 'orderBy'.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L486>`__.
      
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: count(string $item)
   
      Specifies the item that is to be counted in the query result.
      
      Replaces any previously specified selections, if any.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L500>`__.
      
      :param string $item: Will be quoted according to database platform automatically.
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: select()
   
      Specifies items that are to be returned in the query result.
      
      Replaces any previously specified selections, if any.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L517>`__.
      
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: distinct()
   
      Specifies that this query should be DISTINCT.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L527>`__.
      
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      
   .. php:method:: addSelect()
   
      Adds an item that is to be returned in the query result.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L540>`__.
      
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: selectLiteral(string ...$selects)
   
      Specifies items that are to be returned in the query result.
      
      Replaces any previously specified selections, if any.
      This should only be used for literal SQL expressions as no
      quoting/escaping of any kind will be performed on the items.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L556>`__.
      
      :param string ...$selects: Literal SQL expressions to be selected. Warning: No quoting will be done!
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: addSelectLiteral(string ...$selects)
   
      Adds an item that is to be returned in the query result. This should
      only be used for literal SQL expressions as no quoting/escaping of
      any kind will be performed on the items.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L571>`__.
      
      :param string ...$selects: Literal SQL expressions to be selected.
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: delete(string $delete, string|null $alias)
   
      Turns the query being built into a bulk delete query that ranges over
      a certain table.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L589>`__.
      
      :param string $delete: The table whose rows are subject to the deletion.
      Will be quoted according to database platform automatically.
      :param string|null $alias: The table alias used in the constructed query.
      Will be quoted according to database platform automatically.
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: update(string $update, string|null $alias)
   
      Turns the query being built into a bulk update query that ranges over
      a certain table
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L608>`__.
      
      :param string $update: The table whose rows are subject to the update.
      :param string|null $alias: The table alias used in the constructed query.
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: insert(string $insert)
   
      Turns the query being built into an insert query that inserts into
      a certain table
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L626>`__.
      
      :param string $insert: The table into which the rows should be inserted.
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: from(string $from, string|null $alias)
   
      Creates and adds a query root corresponding to the table identified by the
      given alias, forming a cartesian product with any existing query roots.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L642>`__.
      
      :param string $from: The table. Will be quoted according to database platform automatically.
      :param string|null $alias: The alias of the table. Will be quoted according to database platform automatically.
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: join(string $fromAlias, string $join, string $alias, string|null $condition)
   
      Creates and adds a join to the query.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L662>`__.
      
      :param string $fromAlias: The alias that points to a from clause.
      :param string $join: The table name to join.
      :param string $alias: The alias of the join table.
      :param string|null $condition: The condition for the join.
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: innerJoin(string $fromAlias, string $join, string $alias, string|null $condition)
   
      Creates and adds a join to the query.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L684>`__.
      
      :param string $fromAlias: The alias that points to a from clause.
      :param string $join: The table name to join.
      :param string $alias: The alias of the join table.
      :param string|null $condition: The condition for the join.
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: leftJoin(string $fromAlias, string $join, string $alias, string|null $condition)
   
      Creates and adds a left join to the query.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L706>`__.
      
      :param string $fromAlias: The alias that points to a from clause.
      :param string $join: The table name to join.
      :param string $alias: The alias of the join table.
      :param string|null $condition: The condition for the join.
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: rightJoin(string $fromAlias, string $join, string $alias, string|null $condition)
   
      Creates and adds a right join to the query.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L734>`__.
      
      :param string $fromAlias: The alias that points to a from clause.
      :param string $join: The table name to join.
      :param string $alias: The alias of the join table.
      :param string|null $condition: The condition for the join.
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: set(string $key, mixed $value, bool $createNamedParameter)
   
      Sets a new value for a column in a bulk update query.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L771>`__.
      
      :param string $key: The column to set.
      :param mixed $value: The value, expression, placeholder, etc.
      :param bool $createNamedParameter: Automatically create a named parameter for the value
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: where()
   
      Specifies one or more restrictions to the query result.
      
      Replaces any previously specified restrictions, if any.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L788>`__.
      
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: andWhere(string|\CompositeExpression ...$where)
   
      Adds one or more restrictions to the query results, forming a logical
      conjunction with any previously specified restrictions.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L811>`__.
      
      :param string|\CompositeExpression ...$where: The query restrictions.
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: orWhere(string|\CompositeExpression ...$where)
   
      Adds one or more restrictions to the query results, forming a logical
      disjunction with any previously specified restrictions.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L834>`__.
      
      :param string|\CompositeExpression ...$where: The WHERE statement.
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: groupBy(string ...$groupBy)
   
      Specifies a grouping over the results of the query.
      
      Replaces any previously specified groupings, if any.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L855>`__.
      
      :param string ...$groupBy: The grouping expression.
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: addGroupBy(string ...$groupBy)
   
      Adds a grouping expression to the query.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L869>`__.
      
      :param string ...$groupBy: The grouping expression.
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: setValue(string $column, mixed $value, bool $createNamedParameter)
   
      Sets a value for a column in an insert query.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L885>`__.
      
      :param string $column: The column into which the value should be inserted.
      :param mixed $value: The value that should be inserted into the column.
      :param bool $createNamedParameter: Automatically create a named parameter for the value
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: values(array $values, bool $createNamedParameters)
   
      Specifies values for an insert query indexed by column names.
      
      Replaces any previous values, if any.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L904>`__.
      
      :param array $values: The values to specify for the insert query indexed by column names.
      :param bool $createNamedParameters: Automatically create named parameters for all values
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: having(mixed ...$having)
   
      Specifies a restriction over the groups of the query.
      
      Replaces any previous having restrictions, if any.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L925>`__.
      
      :param mixed ...$having: The restriction over the groups.
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: andHaving(mixed ...$having)
   
      Adds a restriction over the groups of the query, forming a logical
      conjunction with any existing having restrictions.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L939>`__.
      
      :param mixed ...$having: The restriction to append.
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: orHaving(mixed ...$having)
   
      Adds a restriction over the groups of the query, forming a logical
      disjunction with any existing having restrictions.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L954>`__.
      
      :param mixed ...$having: The restriction to add.
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: orderBy(string $fieldName, string|null $order)
   
      Specifies an ordering for the query results.
      
      Replaces any previously specified orderings, if any.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L970>`__.
      
      :param string $fieldName: The fieldName to order by. Will be quoted according to database platform automatically.
      :param string|null $order: The ordering direction. No automatic quoting/escaping.
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: addOrderBy(string $fieldName, string|null $order)
   
      Adds an ordering to the query results.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L985>`__.
      
      :param string $fieldName: The fieldName to order by. Will be quoted according to database platform automatically.
      :param string|null $order: The ordering direction.
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: getQueryPart()
   
      Gets a query part by its name.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L999>`__.
      
      
   .. php:method:: getQueryParts()
   
      Gets all query parts.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L1009>`__.
      
      :returntype: array
      
   .. php:method:: resetQueryParts()
   
      Resets SQL parts.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L1021>`__.
      
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: resetQueryPart()
   
      Resets a single SQL part.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L1035>`__.
      
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      :returns: This QueryBuilder instance.
      
   .. php:method:: __toString()
   
      Gets a string representation of this QueryBuilder which corresponds to
      the final SQL query being constructed.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L1048>`__.
      
      :returntype: string
      :returns: The string representation of this QueryBuilder.
      
   .. php:method:: createNamedParameter(string|null $placeHolder)
   
      Creates a new named parameter and bind the value $value to it.
      
      This method provides a shortcut for PDOStatement::bindValue
      when using prepared statements.
      
      The parameter $value specifies the value that you want to bind. If
      $placeholder is not provided bindValue() will automatically create a
      placeholder for you. An automatic placeholder will be of the name
      ':dcValue1', ':dcValue2' etc.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L1070>`__.
      
      :param string|null $placeHolder: The name to bind with. The string must start with a colon ':'.
      :returntype: string
      :returns: the placeholder name used.
      
   .. php:method:: createPositionalParameter()
   
      Creates a new positional parameter and bind the given value to it.
      
      Attention: If you are using positional parameters with the query builder you have
      to be very careful to bind all parameters in the order they appear in the SQL
      statement , otherwise they get bound in the wrong order which can lead to serious
      bugs in your code.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L1088>`__.
      
      :returntype: string
      
   .. php:method:: escapeLikeWildcards(string $value)
   
      Quotes like wildcards for given string value.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L1100>`__.
      
      :param string $value: The value to be quoted.
      :returntype: string
      :returns: The quoted value.
      
   .. php:method:: quote(mixed $input, int $type)
   
      Quotes a given input parameter.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L1112>`__.
      
      :param mixed $input: The parameter to be quoted.
      :param int $type: The type of the parameter.
      
   .. php:method:: quoteIdentifier(string $identifier)
   
      Quotes a string so it can be safely used as a table or column name, even if
      it is a reserved name.
      
      Delimiting style depends on the underlying database platform that is being used.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L1127>`__.
      
      :param string $identifier: The name to be quoted.
      :returntype: string
      :returns: The quoted name.
      
   .. php:method:: quoteIdentifiers()
   
      Quotes an array of column names so it can be safely used, even if the name is a reserved name.
      
      Delimiting style depends on the underlying database platform that is being used.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L1141>`__.
      
      :returntype: array
      
   .. php:method:: quoteIdentifiersForSelect()
   
      Quotes an array of column names so it can be safely used, even if the name is a reserved name.
      
      Takes into account the special case of the * placeholder that can only be used in SELECT type
      statements.
      
      Delimiting style depends on the underlying database platform that is being used.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L1158>`__.
      
      :returntype: array
      
   .. php:method:: quoteColumnValuePairs()
   
      Quotes an associative array of column-value so the column names can be safely used, even
      if the name is a reserved name.
      
      Delimiting style depends on the underlying database platform that is being used.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L1206>`__.
      
      :returntype: array
      
   .. php:method:: quoteArrayBasedValueListToIntegerList(array values)
   
      Implode array to comma separated list with database int-quoted values to be used as direct
      value list for database 'in(...)' or  'notIn(...') expressions. Empty array will return 'NULL'
      as string to avoid database query failure, as 'IN()' is invalid, but 'IN(NULL)' is fine.
      
      This method should be used with care, the preferred way is to use placeholders. It is however
      useful when dealing with potentially many values, which could reach placeholder limit quickly.
      
      When working with prepared statement from QueryBuilder, use this method to proper quote array
      with integer values.
      
      The method can not be used in queries that re-bind a prepared statement to change values for
      subsequent execution due to a PDO limitation.
      
      Return value should only be used as value list for database queries 'in()' and 'notIn()' .
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L1227>`__.
      
      :param array $values: the values
      :returntype: string
      
   .. php:method:: quoteArrayBasedValueListToStringList(array values)
   
      Implode array to comma separated list with database string-quoted values to be used as direct
      value list for database 'in(...)' or  'notIn(...') expressions. Empty array will return 'NULL'
      as string to avoid database query failure, as 'IN()' is invalid, but 'IN(NULL)' is fine.
      
      This method should be used with care, the preferred way is to use placeholders. It is however
      useful when dealing with potentially many values, which could reach placeholder limit quickly.
      
      When working with prepared statement from QueryBuilder, use this method to proper quote array
      with integer values.
      
      The method can not be used in queries that re-bind a prepared statement to change values for
      subsequent execution due to a PDO limitation.
      
      Return value should only be used as value list for database queries 'in()' and 'notIn()' .
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L1261>`__.
      
      :param array $values: the values
      :returntype: string
      
   .. php:method:: castFieldToTextType(string $fieldName)
   
      Creates a cast of the $fieldName to a text datatype depending on the database management system.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L1285>`__.
      
      :param string $fieldName: The fieldname will be quoted and casted according to database platform automatically
      :returntype: string
      
   .. php:method:: __clone()
   
      Deep clone of the QueryBuilder
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Query/QueryBuilder.php#L1398>`__.
