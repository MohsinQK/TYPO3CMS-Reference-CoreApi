.. Generated by https://github.com/linawolf/t3docs_restructured_api_tools 
.. php:namespace::  TYPO3\CMS\Core\Database

.. php:class:: Connection

   
   
   See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php>`__.

   .. php:const:: PARAM_NULL
   
      :php:`0`, type integer
      
      .. php:const:: PARAM_INT
   
      :php:`1`, type integer
      
      .. php:const:: PARAM_STR
   
      :php:`2`, type integer
      
      .. php:const:: PARAM_LOB
   
      :php:`3`, type integer
      
      .. php:const:: PARAM_STMT
   
      :php:`4`, type integer
      
      .. php:const:: PARAM_BOOL
   
      :php:`5`, type integer
      
      .. php:const:: PARAM_INT_ARRAY
   
      :php:`101`, type integer
      
      .. php:const:: PARAM_STR_ARRAY
   
      :php:`102`, type integer
      
      .. php:const:: PARAM_ASCII_STR_ARRAY
   
      :php:`117`, type integer
      
      .. php:const:: ARRAY_PARAM_OFFSET
   
      :php:`100`, type integer
      
      
   
   .. php:method:: connect()
   
      Gets the DatabasePlatform for the connection and initializes custom types and event listeners.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L95>`__.
      
      :returntype: bool
      
   .. php:method:: createQueryBuilder()
   
      Creates a new instance of a SQL query builder.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L114>`__.
      
      :returntype: TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder
      
   .. php:method:: quoteIdentifier(string $identifier)
   
      Quotes a string so it can be safely used as a table or column name, even if
      it is a reserved name.
      
      EXAMPLE: tableName.fieldName => "tableName"."fieldName"
      
      Delimiting style depends on the underlying database platform that is being used.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L130>`__.
      
      :param string $identifier: The name to be quoted.
      :returntype: string
      :returns: The quoted name.
      
   .. php:method:: quoteIdentifiers()
   
      Quotes an array of column names so it can be safely used, even if the name is a reserved name.
      
      Delimiting style depends on the underlying database platform that is being used.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L148>`__.
      
      :returntype: array
      
   .. php:method:: quoteColumnValuePairs()
   
      Quotes an associative array of column-value so the column names can be safely used, even
      if the name is a reserved name.
      
      Delimiting style depends on the underlying database platform that is being used.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L163>`__.
      
      :returntype: array
      
   .. php:method:: escapeLikeWildcards(string $value)
   
      Quotes like wildcards for given string value.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L192>`__.
      
      :param string $value: The value to be quoted.
      :returntype: string
      :returns: The quoted value.
      
   .. php:method:: insert(string $tableName, array $data, array $types)
   
      Inserts a table row with specified data.
      
      All SQL identifiers are expected to be unquoted and will be quoted when building the query.
      Table expression and columns are not escaped and are not safe for user-input.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L209>`__.
      
      :param string $tableName: The name of the table to insert data into.
      :param array $data: An associative array containing column-value pairs.
      :param array $types: Types of the inserted data.
      :returntype: int
      :returns: The number of affected rows.
      
   .. php:method:: bulkInsert(string $tableName, array $data, array $columns, array $types)
   
      Bulk inserts table rows with specified data.
      
      All SQL identifiers are expected to be unquoted and will be quoted when building the query.
      Table expression and columns are not escaped and are not safe for user-input.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L231>`__.
      
      :param string $tableName: The name of the table to insert data into.
      :param array $data: An array containing associative arrays of column-value pairs or just the values to be inserted.
      :param array $columns: An array containing the column names of the data which should be inserted.
      :param array $types: Types of the inserted data.
      :returntype: int
      :returns: The number of affected rows.
      
   .. php:method:: select(string[] $columns, string $tableName, array $identifiers, string[] $groupBy, array $orderBy, int $limit, int $offset)
   
      Executes an SQL SELECT statement on a table.
      
      All SQL identifiers are expected to be unquoted and will be quoted when building the query.
      Table expression and columns are not escaped and are not safe for user-input.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L257>`__.
      
      :param string[] $columns: The columns of the table which to select.
      :param string $tableName: The name of the table on which to select.
      :param array $identifiers: The selection criteria. An associative array containing column-value pairs.
      :param string[] $groupBy: The columns to group the results by.
      :param array $orderBy: Associative array of column name/sort directions pairs.
      :param int $limit: The maximum number of rows to return.
      :param int $offset: The first result row to select (when used with limit)
      
   .. php:method:: update(string $tableName, array $data, array $identifier, array $types)
   
      Executes an SQL UPDATE statement on a table.
      
      All SQL identifiers are expected to be unquoted and will be quoted when building the query.
      Table expression and columns are not escaped and are not safe for user-input.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L303>`__.
      
      :param string $tableName: The name of the table to update.
      :param array $data: An associative array containing column-value pairs.
      :param array $identifier: The update criteria. An associative array containing column-value pairs.
      :param array $types: Types of the merged $data and $identifier arrays in that order.
      :returntype: int
      :returns: The number of affected rows.
      
   .. php:method:: delete(string $tableName, array $identifier, array $types)
   
      Executes an SQL DELETE statement on a table.
      
      All SQL identifiers are expected to be unquoted and will be quoted when building the query.
      Table expression and columns are not escaped and are not safe for user-input.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L325>`__.
      
      :param string $tableName: The name of the table on which to delete.
      :param array $identifier: The deletion criteria. An associative array containing column-value pairs.
      :param array $types: The types of identifiers.
      :returntype: int
      :returns: The number of affected rows.
      
   .. php:method:: truncate(string $tableName, bool $cascade)
   
      Executes an SQL TRUNCATE statement on a table.
      
      All SQL identifiers are expected to be unquoted and will be quoted when building the query.
      Table expression is not escaped and not safe for user-input.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L345>`__.
      
      :param string $tableName: The name of the table to truncate.
      :param bool $cascade: Not supported on many platforms but would cascade the truncate by following foreign keys.
      :returntype: int
      :returns: The number of affected rows. For a truncate this is unreliable as there is no meaningful information.
      
   .. php:method:: count(string $item, string $tableName, array $identifiers)
   
      Executes an SQL SELECT COUNT() statement on a table and returns the count result.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L364>`__.
      
      :param string $item: The column/expression of the table which to count
      :param string $tableName: The name of the table on which to count.
      :param array $identifiers: The selection criteria. An associative array containing column-value pairs.
      :returntype: int
      :returns: The number of rows counted
      
   .. php:method:: prepareConnection()
   
      Execute commands after initializing a new connection.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L418>`__.
      
      
   .. php:method:: lastInsertId()
   
      Returns the ID of the last inserted row or sequence value.
      
      If table and fieldname have been provided it tries to build
      the sequence name for PostgreSQL. For MySQL the parameters
      are not required / and only the table name is passed through.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L445>`__.
      
      :returntype: string
      
   .. php:method:: getExpressionBuilder()
   
      Gets the ExpressionBuilder for the connection.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L459>`__.
      
      
   .. php:method:: getDatabase()
   
      Gets the name of the currently selected database.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L232>`__.
      
      
   .. php:method:: getDriver()
   
      Gets the DBAL driver instance.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L248>`__.
      
      
   .. php:method:: getConfiguration()
   
      Gets the Configuration used by the Connection.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L258>`__.
      
      
   .. php:method:: getEventManager()
   
      Gets the EventManager used by the Connection.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L268>`__.
      
      
   .. php:method:: getDatabasePlatform()
   
      Gets the DatabasePlatform for the connection.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L280>`__.
      
      
   .. php:method:: createExpressionBuilder()
   
      Creates an expression builder for the connection.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L293>`__.
      
      :returntype: Doctrine\\DBAL\\Query\\Expression\\ExpressionBuilder
      
   .. php:method:: isAutoCommit()
   
      Returns the current auto-commit mode for this connection.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L476>`__.
      
      
   .. php:method:: setAutoCommit(bool $autoCommit)
   
      Sets auto-commit mode for this connection.
      
      If a connection is in auto-commit mode, then all its SQL statements will be executed and committed as individual
      transactions. Otherwise, its SQL statements are grouped into transactions that are terminated by a call to either
      the method commit or the method rollback. By default, new connections are in auto-commit mode.
      
      NOTE: If this method is called during a transaction and the auto-commit mode is changed, the transaction is
      committed. If this method is called and the auto-commit mode is not changed, the call is a no-op.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L497>`__.
      
      :param bool $autoCommit: True to enable auto-commit mode; false to disable it.
      
   .. php:method:: fetchAssociative(string $query, list|array<string,mixed> $params, array<int,int|string|\Type|null>|array<string,int|string|\Type|null> $types)
   
      Prepares and executes an SQL query and returns the first row of the result
      as an associative array.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L528>`__.
      
      :param string $query: SQL query
      :param list|array<string,mixed> $params: Query parameters
      :param array<int,int|string|\Type|null>|array<string,int|string|\Type|null> $types: Parameter types
      
   .. php:method:: fetchNumeric(string $query, list|array<string,mixed> $params, array<int,int|string|\Type|null>|array<string,int|string|\Type|null> $types)
   
      Prepares and executes an SQL query and returns the first row of the result
      as a numerically indexed array.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L545>`__.
      
      :param string $query: SQL query
      :param list|array<string,mixed> $params: Query parameters
      :param array<int,int|string|\Type|null>|array<string,int|string|\Type|null> $types: Parameter types
      
   .. php:method:: fetchOne(string $query, list|array<string,mixed> $params, array<int,int|string|\Type|null>|array<string,int|string|\Type|null> $types)
   
      Prepares and executes an SQL query and returns the value of a single column
      of the first row of the result.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L562>`__.
      
      :param string $query: SQL query
      :param list|array<string,mixed> $params: Query parameters
      :param array<int,int|string|\Type|null>|array<string,int|string|\Type|null> $types: Parameter types
      
   .. php:method:: isConnected()
   
      Whether an actual connection to the database is established.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L572>`__.
      
      
   .. php:method:: isTransactionActive()
   
      Checks whether a transaction is currently active.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L582>`__.
      
      
   .. php:method:: close()
   
      Closes the connection.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L652>`__.
      
      
   .. php:method:: setTransactionIsolation(int $level)
   
      Sets the transaction isolation level.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L667>`__.
      
      :param int $level: The level to set.
      
   .. php:method:: getTransactionIsolation()
   
      Gets the currently active transaction isolation level.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L681>`__.
      
      
   .. php:method:: quote()
   
      The usage of this method is discouraged. Use prepared statements
      or {@see AbstractPlatform::quoteStringLiteral()} instead.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L810>`__.
      
      
   .. php:method:: fetchAllNumeric(string $query, list|array<string,mixed> $params, array<int,int|string|\Type|null>|array<string,int|string|\Type|null> $types)
   
      Prepares and executes an SQL query and returns the result as an array of numeric arrays.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L830>`__.
      
      :param string $query: SQL query
      :param list|array<string,mixed> $params: Query parameters
      :param array<int,int|string|\Type|null>|array<string,int|string|\Type|null> $types: Parameter types
      :returntype: array
      
   .. php:method:: fetchAllAssociative(string $query, list|array<string,mixed> $params, array<int,int|string|\Type|null>|array<string,int|string|\Type|null> $types)
   
      Prepares and executes an SQL query and returns the result as an array of associative arrays.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L846>`__.
      
      :param string $query: SQL query
      :param list|array<string,mixed> $params: Query parameters
      :param array<int,int|string|\Type|null>|array<string,int|string|\Type|null> $types: Parameter types
      :returntype: array
      
   .. php:method:: fetchAllKeyValue(string query, array params = array (
   ), array types = array (
   ))
   
      
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L863>`__.
      
      :param string $query: the query
      :param array $params: the params, default: array (
      )
      :param array $types: the types, default: array (
      )
      :returntype: array
      
   .. php:method:: fetchAllAssociativeIndexed(string query, array params = array (
   ), array types = array (
   ))
   
      
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L881>`__.
      
      :param string $query: the query
      :param array $params: the params, default: array (
      )
      :param array $types: the types, default: array (
      )
      :returntype: array
      
   .. php:method:: fetchFirstColumn(string $query, list|array<string,mixed> $params, array<int,int|string|\Type|null>|array<string,int|string|\Type|null> $types)
   
      Prepares and executes an SQL query and returns the result as an array of the first column values.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L897>`__.
      
      :param string $query: SQL query
      :param list|array<string,mixed> $params: Query parameters
      :param array<int,int|string|\Type|null>|array<string,int|string|\Type|null> $types: Parameter types
      :returntype: array
      
   .. php:method:: iterateNumeric(string $query, list|array<string,mixed> $params, array<int,int|string|\Type|null>|array<string,int|string|\Type|null> $types)
   
      Prepares and executes an SQL query and returns the result as an iterator over rows represented as numeric arrays.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L913>`__.
      
      :param string $query: SQL query
      :param list|array<string,mixed> $params: Query parameters
      :param array<int,int|string|\Type|null>|array<string,int|string|\Type|null> $types: Parameter types
      :returntype: Traversable
      
   .. php:method:: iterateAssociative(string $query, list|array<string,mixed> $params, array<int,int|string|\Type|null>|array<string,int|string|\Type|null> $types)
   
      Prepares and executes an SQL query and returns the result as an iterator over rows represented
      as associative arrays.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L930>`__.
      
      :param string $query: SQL query
      :param list|array<string,mixed> $params: Query parameters
      :param array<int,int|string|\Type|null>|array<string,int|string|\Type|null> $types: Parameter types
      :returntype: Traversable
      
   .. php:method:: iterateKeyValue(string $query, list|array<string,mixed> $params, array<int,int|string|\Type|null>|array<string,int|string|\Type|null> $types)
   
      Prepares and executes an SQL query and returns the result as an iterator with the keys
      mapped to the first column and the values mapped to the second column.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L947>`__.
      
      :param string $query: SQL query
      :param list|array<string,mixed> $params: Query parameters
      :param array<int,int|string|\Type|null>|array<string,int|string|\Type|null> $types: Parameter types
      :returntype: Traversable
      
   .. php:method:: iterateAssociativeIndexed(string $query, list|array<string,mixed> $params, array<int,int|string>|array<string,int|string> $types)
   
      Prepares and executes an SQL query and returns the result as an iterator with the keys mapped
      to the first column and the values being an associative array representing the rest of the columns
      and their values.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L965>`__.
      
      :param string $query: SQL query
      :param list|array<string,mixed> $params: Query parameters
      :param array<int,int|string>|array<string,int|string> $types: Parameter types
      :returntype: Traversable
      
   .. php:method:: iterateColumn(string $query, list|array<string,mixed> $params, array<int,int|string|\Type|null>|array<string,int|string|\Type|null> $types)
   
      Prepares and executes an SQL query and returns the result as an iterator over the first column values.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L981>`__.
      
      :param string $query: SQL query
      :param list|array<string,mixed> $params: Query parameters
      :param array<int,int|string|\Type|null>|array<string,int|string|\Type|null> $types: Parameter types
      :returntype: Traversable
      
   .. php:method:: prepare(string $sql)
   
      Prepares an SQL statement.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L993>`__.
      
      :param string $sql: The SQL statement to prepare.
      :returntype: Doctrine\\DBAL\\Statement
      
   .. php:method:: executeQuery(string $sql, list|array<string,mixed> $params, array<int,int|string|\Type|null>|array<string,int|string|\Type|null> $types)
   
      Executes an, optionally parametrized, SQL query.
      
      If the query is parametrized, a prepared statement is used.
      If an SQLLogger is configured, the execution is logged.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L1018>`__.
      
      :param string $sql: SQL query
      :param list|array<string,mixed> $params: Query parameters
      :param array<int,int|string|\Type|null>|array<string,int|string|\Type|null> $types: Parameter types
      :returntype: Doctrine\\DBAL\\Result
      
   .. php:method:: executeCacheQuery(string $sql, list|array<string,mixed> $params, array<int,int|string|\Type|null>|array<string,int|string|\Type|null> $types)
   
      Executes a caching query.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L1072>`__.
      
      :param string $sql: SQL query
      :param list|array<string,mixed> $params: Query parameters
      :param array<int,int|string|\Type|null>|array<string,int|string|\Type|null> $types: Parameter types
      :returntype: Doctrine\\DBAL\\Result
      
   .. php:method:: executeStatement(string $sql, list|array<string,mixed> $params, array<int,int|string|\Type|null>|array<string,int|string|\Type|null> $types)
   
      Executes an SQL statement with the given parameters and returns the number of affected rows.
      
      Could be used for:
       - DML statements: INSERT, UPDATE, DELETE, etc.
       - DDL statements: CREATE, DROP, ALTER, etc.
       - DCL statements: GRANT, REVOKE, etc.
       - Session control statements: ALTER SESSION, SET, DECLARE, etc.
       - Other statements that don't yield a row set.
      
      This method supports PDO binding types as well as DBAL mapping types.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L1132>`__.
      
      :param string $sql: SQL statement
      :param list|array<string,mixed> $params: Statement parameters
      :param array<int,int|string|\Type|null>|array<string,int|string|\Type|null> $types: Parameter types
      
   .. php:method:: getTransactionNestingLevel()
   
      Returns the current transaction nesting level.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L1175>`__.
      
      
   .. php:method:: transactional(\Closure $func)
   
      Executes a function in a transaction.
      
      The function gets passed this Connection instance as an (optional) parameter.
      
      If an exception occurs during execution of the function or transaction commit,
      the transaction is rolled back and the exception re-thrown.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L1225>`__.
      
      :param \Closure $func: The function to execute transactionally.
      
   .. php:method:: setNestTransactionsWithSavepoints()
   
      Sets if nested transactions should use savepoints.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L1249>`__.
      
      
   .. php:method:: getNestTransactionsWithSavepoints()
   
      Gets if nested transactions should use savepoints.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L1267>`__.
      
      
   .. php:method:: beginTransaction()
   
      
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L1287>`__.
      
      
   .. php:method:: commit()
   
      
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L1326>`__.
      
      
   .. php:method:: rollBack()
   
      Cancels any database changes done during the current transaction.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L1403>`__.
      
      
   .. php:method:: createSavepoint(string $savepoint)
   
      Creates a new savepoint.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L1457>`__.
      
      :param string $savepoint: The name of the savepoint to create.
      
   .. php:method:: releaseSavepoint(string $savepoint)
   
      Releases the given savepoint.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L1477>`__.
      
      :param string $savepoint: The name of the savepoint to release.
      
   .. php:method:: rollbackSavepoint(string $savepoint)
   
      Rolls back to the given savepoint.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L1501>`__.
      
      :param string $savepoint: The name of the savepoint to rollback to.
      
   .. php:method:: getWrappedConnection()
   
      Gets the wrapped driver connection.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L1521>`__.
      
      
   .. php:method:: getNativeConnection()
   
      
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L1540>`__.
      
      
   .. php:method:: createSchemaManager()
   
      Creates a SchemaManager that can be used to inspect or change the
      database schema through the connection.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L1561>`__.
      
      :returntype: Doctrine\\DBAL\\Schema\\AbstractSchemaManager
      
   .. php:method:: getSchemaManager()
   
      Gets the SchemaManager that can be used to inspect or change the
      database schema through the connection.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L1579>`__.
      
      
   .. php:method:: setRollbackOnly()
   
      Marks the current transaction so that the only possible
      outcome for the transaction to be rolled back.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L1602>`__.
      
      
   .. php:method:: isRollbackOnly()
   
      Checks whether the current transaction is marked for rollback only.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L1618>`__.
      
      
   .. php:method:: convertToDatabaseValue(mixed $value, string $type)
   
      Converts a given value to its database representation according to the conversion
      rules of a specific DBAL mapping type.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L1638>`__.
      
      :param mixed $value: The value to convert.
      :param string $type: The name of the DBAL mapping type.
      
   .. php:method:: convertToPHPValue(mixed $value, string $type)
   
      Converts a given value to its PHP representation according to the conversion
      rules of a specific DBAL mapping type.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L1654>`__.
      
      :param mixed $value: The value to convert.
      :param string $type: The name of the DBAL mapping type.
      
   .. php:method:: executeUpdate(array $params, (int|string|null)[] $types)
   
      BC layer for a wide-spread use-case of old DBAL APIs
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L1830>`__.
      
      :param array $params: The query parameters
      :param (int|string|null)[] $types: The parameter types
      :returntype: int
      
   .. php:method:: query(string sql)
   
      BC layer for a wide-spread use-case of old DBAL APIs
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L1840>`__.
      
      :param string $sql: the sql
      :returntype: Doctrine\\DBAL\\Result
      
   .. php:method:: exec(string sql)
   
      BC layer for a wide-spread use-case of old DBAL APIs
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L1850>`__.
      
      :param string $sql: the sql
      :returntype: int
      
   .. php:method:: setLogger()
   
      Sets a logger.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Database/Connection.php#L21>`__.
