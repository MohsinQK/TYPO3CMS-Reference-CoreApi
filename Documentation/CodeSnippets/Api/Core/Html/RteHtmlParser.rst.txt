.. Generated by https://github.com/linawolf/t3docs_restructured_api_tools 
.. php:namespace::  TYPO3\CMS\Core\Html

.. php:class:: RteHtmlParser

   Class for parsing HTML for the Rich Text Editor. (also called transformations)
   
   Concerning line breaks:
   Regardless if LF (Unix-style) or CRLF (Windows) was put in, the HtmlParser works with LFs and migrates all
   line breaks to LFs internally, however when all transformations are done, all LFs are transformed to CRLFs.
   This means: RteHtmlParser always returns CRLFs to be maximum compatible with all formats.
   
   See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Html/RteHtmlParser.php>`__.

   .. php:const:: VOID_ELEMENTS
   
      :php:`'area|base|br|col|command|embed|hr|img|input|keygen|meta|param|source|track|wbr'`, type string
      
      
   
   .. php:method:: transformTextForRichTextEditor()
   
      Main entry point for transforming RTE content in the database so the Rich Text Editor can deal with
      e.g. links.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Html/RteHtmlParser.php#L171>`__.
      
      :returntype: string
      
   .. php:method:: transformTextForPersistence()
   
      Called to process HTML content before it is stored in the database.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Html/RteHtmlParser.php#L205>`__.
      
      :returntype: string
      
   .. php:method:: splitIntoBlock(string $tag, string $content, bool $eliminateExtraEndTags)
   
      Returns an array with the $content divided by tag-blocks specified with the list of tags, $tag
      Even numbers in the array are outside the blocks, Odd numbers are block-content.
      
      Use ->removeFirstAndLastTag() to process the content if needed.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Html/RteHtmlParser.php#L51>`__.
      
      :param string $tag: List of tags, comma separated.
      :param string $content: HTML-content
      :param bool $eliminateExtraEndTags: If set, excessive end tags are ignored - you should probably set this in most cases.
      
   .. php:method:: splitIntoBlockRecursiveProc(string $tag, string $content, object $procObj, string $callBackContent, string $callBackTags, int $level)
   
      Splitting content into blocks *recursively* and processing tags/content with call back functions.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Html/RteHtmlParser.php#L126>`__.
      
      :param string $tag: Tag list, see splitIntoBlock()
      :param string $content: Content, see splitIntoBlock()
      :param object $procObj: Object where call back methods are.
      :param string $callBackContent: Name of call back method for content; "function callBackContent($str,$level)
      :param string $callBackTags: Name of call back method for tags; "function callBackTags($tags,$level)
      :param int $level: Indent level
      
   .. php:method:: splitTags(string $tag, string $content)
   
      Returns an array with the $content divided by tag-blocks specified with the list of tags, $tag
      Even numbers in the array are outside the blocks, Odd numbers are block-content.
      
      Use ->removeFirstAndLastTag() to process the content if needed.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Html/RteHtmlParser.php#L161>`__.
      
      :param string $tag: List of tags
      :param string $content: HTML-content
      
   .. php:method:: removeFirstAndLastTag(string $str)
   
      Removes the first and last tag in the string
      Anything before the first and after the last tags respectively is also removed
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Html/RteHtmlParser.php#L199>`__.
      
      :param string $str: String to process
      
   .. php:method:: getFirstTag(string $str)
   
      Returns the first tag in $str
      Actually everything from the beginning of the $str is returned, so you better make sure the tag is the first thing.
      
      ..
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Html/RteHtmlParser.php#L222>`__.
      
      :param string $str: HTML string with tags
      
   .. php:method:: getFirstTagName(string $str, bool $preserveCase)
   
      Returns the NAME of the first tag in $str
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Html/RteHtmlParser.php#L245>`__.
      
      :param string $str: HTML tag (The element name MUST be separated from the attributes by a space character! Just *whitespace* will not do)
      :param bool $preserveCase: If set, then the tag is NOT converted to uppercase by case is preserved.
      
   .. php:method:: get_tag_attributes(string $tag, bool $deHSC)
   
      Returns an array with all attributes as keys. Attributes are only lowercase a-z
      If an attribute is empty (shorthand), then the value for the key is empty. You can check if it existed with isset()
      
      Compared to the method in GeneralUtility::get_tag_attributes this method also returns meta data about each
      attribute, e.g. if it is a shorthand attribute, and what the quotation is. Also, since all attribute keys
      are lower-cased, the meta information contains the original attribute name.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Html/RteHtmlParser.php#L271>`__.
      
      :param string $tag: Tag: $tag is either a whole tag (eg '<TAG OPTION ATTRIB=VALUE>') or the parameterlist (ex ' OPTION ATTRIB=VALUE>')
      :param bool $deHSC: If set, the attribute values are de-htmlspecialchar'ed. Should actually always be set!
      
   .. php:method:: HTMLcleaner(string $content, array $tags, mixed $keepAll, int $hSC, array $addConfig)
   
      Function that can clean up HTML content according to configuration given in the $tags array.
      
      Initializing the $tags array to allow a list of tags (in this case <B>,<I>,<U> and <A>), set it like this:		 $tags = array_flip(explode(',','b,a,i,u'))
      If the value of the $tags[$tagname] entry is an array, advanced processing of the tags is initialized. These are the options:
      
      $tags[$tagname] = Array(
      'overrideAttribs' => ''		If set, this string is preset as the attributes of the tag
      'allowedAttribs' =>   '0' (zero) = no attributes allowed, '[commalist of attributes]' = only allowed attributes. If blank, all attributes are allowed.
      'fixAttrib' => Array(
      '[attribute name]' => Array (
      'set' => Force the attribute value to this value.
      'unset' => Boolean: If set, the attribute is unset.
      'default' =>	 If no attribute exists by this name, this value is set as default value (if this value is not blank)
      'always' =>	 Boolean. If set, the attribute is always processed. Normally an attribute is processed only if it exists
      'trim,intval,lower,upper' =>	 All booleans. If any of these keys are set, the value is passed through the respective PHP-functions.
      'range' => Array ('[low limit]','[high limit, optional]')		Setting integer range.
      'list' => Array ('[value1/default]','[value2]','[value3]')		Attribute must be in this list. If not, the value is set to the first element.
      'removeIfFalse' =>	 Boolean/'blank'.	If set, then the attribute is removed if it is 'FALSE'. If this value is set to 'blank' then the value must be a blank string (that means a 'zero' value will not be removed)
      'removeIfEquals' =>	 [value]	If the attribute value matches the value set here, then it is removed.
      'casesensitiveComp' => 1	If set, then the removeIfEquals and list comparisons will be case sensitive. Otherwise not.
      )
      ),
      'protect' => '',	Boolean. If set, the tag <> is converted to &lt; and &gt;
      'remap' => '',		String. If set, the tagname is remapped to this tagname
      'rmTagIfNoAttrib' => '',	Boolean. If set, then the tag is removed if no attributes happened to be there.
      'nesting' => '',	Boolean/'global'. If set TRUE, then this tag must have starting and ending tags in the correct order. Any tags not in this order will be discarded. Thus '</B><B><I></B></I></B>' will be converted to '<B><I></B></I>'. Is the value 'global' then true nesting in relation to other tags marked for 'global' nesting control is preserved. This means that if <B> and <I> are set for global nesting then this string '</B><B><I></B></I></B>' is converted to '<B></B>'
      )
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Html/RteHtmlParser.php#L387>`__.
      
      :param string $content: Is the HTML-content being processed. This is also the result being returned.
      :param array $tags: Is an array where each key is a tagname in lowercase. Only tags present as keys in this array are preserved. The value of the key can be an array with a vast number of options to configure.
      :param mixed $keepAll: Boolean/'protect', if set, then all tags are kept regardless of tags present as keys in $tags-array. If 'protect' then the preserved tags have their <> converted to &lt; and &gt;
      :param int $hSC: Values -1,0,1,2: Set to zero= disabled, set to 1 then the content BETWEEN tags is htmlspecialchar()'ed, set to -1 its the opposite and set to 2 the content will be HSC'ed BUT with preservation for real entities (eg. "&amp;" or "&#234;")
      :param array $addConfig: Configuration array send along as $conf to the internal functions
      
   .. php:method:: bidir_htmlspecialchars(string $value, int $dir)
   
      Converts htmlspecialchars forth ($dir=1) AND back ($dir=-1)
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Html/RteHtmlParser.php#L689>`__.
      
      :param string $value: Input value
      :param int $dir: Direction: forth ($dir=1, dir=2 for preserving entities) AND back ($dir=-1)
      
   .. php:method:: prefixResourcePath(string $main_prefix, string $content, array $alternatives, string $suffix)
   
      Prefixes the relative paths of hrefs/src/action in the tags [td,table,body,img,input,form,link,script,a]
      in the $content with the $main_prefix or and alternative given by $alternatives
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Html/RteHtmlParser.php#L713>`__.
      
      :param string $main_prefix: Prefix string
      :param string $content: HTML content
      :param array $alternatives: Array with alternative prefixes for certain of the tags. key=>value pairs where the keys are the tag element names in uppercase
      :param string $suffix: Suffix string (put after the resource).
      
   .. php:method:: stripEmptyTags(string $content, string $tagList, bool $treatNonBreakingSpaceAsEmpty, bool $keepTags)
   
      Strips empty tags from HTML.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Html/RteHtmlParser.php#L1011>`__.
      
      :param string $content: The content to be stripped of empty tags
      :param string $tagList: The comma separated list of tags to be stripped.
      If empty, all empty tags will be stripped
      :param bool $treatNonBreakingSpaceAsEmpty: If TRUE tags containing only &nbsp; entities will be treated as empty.
      :param bool $keepTags: If true, the provided tags will be kept instead of stripped.
      
   .. php:method:: setLogger()
   
      Sets a logger.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Html/RteHtmlParser.php#L21>`__.
