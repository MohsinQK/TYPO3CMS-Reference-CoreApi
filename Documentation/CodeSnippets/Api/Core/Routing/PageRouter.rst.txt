.. Generated by https://github.com/linawolf/t3docs_restructured_api_tools 
.. php:namespace::  TYPO3\CMS\Core\Routing

.. php:class:: PageRouter

   Page Router - responsible for a page based on a request, by looking up the slug of the page path.
   
   Is also used for generating URLs for pages.
   
   Resolving is done via the "Route Candidate" pattern.
   
   Example:
   - /about-us/team/management/
   
   will look for all pages that have
   - /about-us
   - /about-us/
   - /about-us/team
   - /about-us/team/
   - /about-us/team/management
   - /about-us/team/management/
   
   And create route candidates for that.
   
   Please note: PageRouter does not restrict the HTTP method or is bound to any domain constraints,
   as the SiteMatcher has done that already.
   
   The concept of the PageRouter is to *resolve*, and to *generate* URIs. On top, it is a facade to hide the
   dependency to symfony and to not expose its logic.
   
   See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Routing/PageRouter.php>`__.

   .. php:const:: ABSOLUTE_URL
   
      :php:`'url'`, type string
      
      .. php:const:: ABSOLUTE_PATH
   
      :php:`'absolute'`, type string
      
      
   
   .. php:method:: matchRequest()
   
      Finds a RouteResult based on the given request.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Routing/PageRouter.php#L118>`__.
      
      :returntype: TYPO3\\CMS\\Core\\Routing\\RouteResultInterface
      
   .. php:method:: generateUri(array $parameters, string $fragment, string $type)
   
      API for generating a page where the $route parameter is typically an array (page record) or the page ID
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Routing/PageRouter.php#L228>`__.
      
      :param array $parameters: an array of query parameters which can be built into the URI path, also consider the special handling of "_language"
      :param string $fragment: additional #my-fragment part
      :param string $type: see the RouterInterface for possible types
      :returntype: Psr\\Http\\Message\\UriInterface
