.. Generated by https://github.com/linawolf/t3docs_restructured_api_tools 
.. php:namespace::  TYPO3\CMS\Core\Utility

.. php:class:: GeneralUtility

   The legendary "t3lib_div" class - Miscellaneous functions for general purpose.
   
   Most of the functions do not relate specifically to TYPO3
   However a section of functions requires certain TYPO3 features available
   See comments in the source.
   You are encouraged to use this library in your own scripts!
   
   USE:
   All methods in this class are meant to be called statically.
   So use \TYPO3\CMS\Core\Utility\GeneralUtility::[method-name] to refer to the functions, eg. '\TYPO3\CMS\Core\Utility\GeneralUtility::milliseconds()'
   
   See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php>`__.

   
   .. php:method:: _GP(string $var)
   
      Returns the 'GLOBAL' value of incoming data from POST or GET, with priority to POST, which is equivalent to 'GP' order
      In case you already know by which method your data is arriving consider using GeneralUtility::_GET or GeneralUtility::_POST.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L108>`__.
      
      :param string $var: GET/POST var to return
      
   .. php:method:: _GPmerged(string $parameter)
   
      Returns the global arrays $_GET and $_POST merged with $_POST taking precedence.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L129>`__.
      
      :param string $parameter: Key (variable name) from GET or POST vars
      
   .. php:method:: _GET(string $var)
   
      Returns the global $_GET array (or value from) normalized to contain un-escaped values.
      
      This function was previously used to normalize between magic quotes logic, which was removed from PHP 5.5
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L147>`__.
      
      :param string $var: Optional pointer to value in GET array (basically name of GET var)
      
   .. php:method:: _POST(string $var)
   
      Returns the global $_POST array (or value from) normalized to contain un-escaped values.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L167>`__.
      
      :param string $var: Optional pointer to value in POST array (basically name of POST var)
      
   .. php:method:: fixed_lgd_cs(string $string, int $chars, string $appendString)
   
      Truncates a string with appended/prepended "..." and takes current character set into consideration.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L191>`__.
      
      :param string $string: String to truncate
      :param int $chars: Must be an integer with an absolute value of at least 4. if negative the string is cropped from the right end.
      :param string $appendString: Appendix to the truncated string
      
   .. php:method:: cmpIP(string $baseIP, string $list)
   
      Match IP number with list of numbers with wildcard
      Dispatcher method for switching into specialised IPv4 and IPv6 methods.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L215>`__.
      
      :param string $baseIP: Is the current remote IP address for instance, typ. REMOTE_ADDR
      :param string $list: Is a comma-list of IP-addresses to match with. CIDR-notation should be used. For IPv4 addresses only, the *-wildcard is also allowed instead of number, plus leaving out parts in the IP number is accepted as wildcard (eg. 192.168.*.* equals 192.168). If list is "*" no check is done and the function returns TRUE immediately. An empty list always returns FALSE.
      
   .. php:method:: cmpIPv4(string $baseIP, string $list)
   
      Match IPv4 number with list of numbers with wildcard
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L237>`__.
      
      :param string $baseIP: Is the current remote IP address for instance, typ. REMOTE_ADDR
      :param string $list: Is a comma-list of IP-addresses to match with. CIDR-notation, *-wildcard allowed instead of number, plus leaving out parts in the IP number is accepted as wildcard (eg. 192.168.0.0/16 equals 192.168.*.* equals 192.168), could also contain IPv6 addresses
      
   .. php:method:: cmpIPv6(string $baseIP, string $list)
   
      Match IPv6 address with a list of IPv6 prefixes
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L286>`__.
      
      :param string $baseIP: Is the current remote IP address for instance
      :param string $list: Is a comma-list of IPv6 prefixes, could also contain IPv4 addresses. IPv6 addresses
      must be specified in CIDR-notation, not with * wildcard, otherwise self::validIPv6() will fail.
      
   .. php:method:: normalizeIPv6(string $address)
   
      Normalize an IPv6 address to full length
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L341>`__.
      
      :param string $address: Given IPv6 address
      
   .. php:method:: validIP(string $ip)
   
      Validate a given IP address.
      
      Possible format are IPv4 and IPv6.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L405>`__.
      
      :param string $ip: IP address to be tested
      
   .. php:method:: validIPv4(string $ip)
   
      Validate a given IP address to the IPv4 address format.
      
      Example for possible format: 10.0.45.99
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L418>`__.
      
      :param string $ip: IP address to be tested
      
   .. php:method:: validIPv6(string $ip)
   
      Validate a given IP address to the IPv6 address format.
      
      Example for possible format: 43FB::BB3F:A0A0:0 | ::1
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L431>`__.
      
      :param string $ip: IP address to be tested
      
   .. php:method:: cmpFQDN(string $baseHost, string $list)
   
      Match fully qualified domain name with list of strings with wildcard
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L443>`__.
      
      :param string $baseHost: A hostname or an IPv4/IPv6-address (will by reverse-resolved; typically REMOTE_ADDR)
      :param string $list: A comma-list of domain names to match with. *-wildcard allowed but cannot be part of a string, so it must match the full host name (eg. myhost.*.com => correct, myhost.*domain.com => wrong)
      
   .. php:method:: isOnCurrentHost(string $url)
   
      Checks if a given URL matches the host that currently handles this HTTP request.
      
      Scheme, hostname and (optional) port of the given URL are compared.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L511>`__.
      
      :param string $url: URL to compare with the TYPO3 request host
      
   .. php:method:: inList(string $list, string $item)
   
      Check for item in list
      Check if an item exists in a comma-separated list of items.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L524>`__.
      
      :param string $list: Comma-separated list of items (string)
      :param string $item: Item to check for
      
   .. php:method:: expandList(string $list)
   
      Expand a comma-separated list of integers with ranges (eg 1,3-5,7 becomes 1,3,4,5,7).
      
      Ranges are limited to 1000 values per range.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L536>`__.
      
      :param string $list: Comma-separated list of integers with ranges (string)
      
   .. php:method:: md5int(string $str)
   
      Makes a positive integer hash out of the first 7 chars from the md5 hash of the input
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L564>`__.
      
      :param string $str: String to md5-hash
      
   .. php:method:: hmac(string $input, string $additionalSecret)
   
      Returns a proper HMAC on a given input string and secret TYPO3 encryption key.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L576>`__.
      
      :param string $input: Input string to create HMAC from
      :param string $additionalSecret: additionalSecret to prevent hmac being used in a different context
      
   .. php:method:: split_fileref(string $fileNameWithPath)
   
      Splits a reference to a file in 5 parts
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L606>`__.
      
      :param string $fileNameWithPath: File name with path to be analyzed (must exist if open_basedir is set)
      
   .. php:method:: dirname(string $path)
   
      Returns the directory part of a path without trailing slash
      If there is no dir-part, then an empty string is returned.
      
      Behaviour:
      
      '/dir1/dir2/script.php' => '/dir1/dir2'
      '/dir1/' => '/dir1'
      'dir1/script.php' => 'dir1'
      'd/script.php' => 'd'
      '/script.php' => ''
      '' => ''
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L646>`__.
      
      :param string $path: Directory name / path
      
   .. php:method:: formatSize(int $sizeInBytes, string $labels, int $base)
   
      Formats the input integer $sizeInBytes as bytes/kilobytes/megabytes (-/K/M)
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L660>`__.
      
      :param int $sizeInBytes: Number of bytes to format.
      :param string $labels: Binary unit name "iec", decimal unit name "si" or labels for bytes, kilo, mega, giga, and so on separated by vertical bar (|) and possibly encapsulated in "". Eg: " | K| M| G". Defaults to "iec".
      :param int $base: The unit base if not using a unit name. Defaults to 1024.
      
   .. php:method:: splitCalc(string $string, string $operators)
   
      This splits a string by the chars in $operators (typical /+-*) and returns an array with them in
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L702>`__.
      
      :param string $string: Input string, eg "123 + 456 / 789 - 4
      :param string $operators: Operators to split by, typically "/+-*
      
   .. php:method:: validEmail(string $email)
   
      Checking syntax of input email address
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L723>`__.
      
      :param string $email: Input string to evaluate
      
   .. php:method:: underscoredToUpperCamelCase(string $string)
   
      Returns a given string with underscores as UpperCamelCase.
      
      Example: Converts blog_example to BlogExample
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L752>`__.
      
      :param string $string: String to be converted to camel case
      
   .. php:method:: underscoredToLowerCamelCase(string $string)
   
      Returns a given string with underscores as lowerCamelCase.
      
      Example: Converts minimal_value to minimalValue
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L764>`__.
      
      :param string $string: String to be converted to camel case
      
   .. php:method:: camelCaseToLowerCaseUnderscored(string $string)
   
      Returns a given CamelCasedString as a lowercase string with underscores.
      
      Example: Converts BlogExample to blog_example, and minimalValue to minimal_value
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L776>`__.
      
      :param string $string: String to be converted to lowercase underscore
      
   .. php:method:: isValidUrl(string $url)
   
      Checks if a given string is a Uniform Resource Locator (URL).
      
      On seriously malformed URLs, parse_url may return FALSE and emit an
      E_WARNING.
      
      filter_var() requires a scheme to be present.
      
      http://www.faqs.org/rfcs/rfc2396.html
      Scheme names consist of a sequence of characters beginning with a
      lower case letter and followed by any combination of lower case letters,
      digits, plus ("+"), period ("."), or hyphen ("-").  For resiliency,
      programs interpreting URI should treat upper case letters as equivalent to
      lower case in scheme names (e.g., allow "HTTP" as well as "http").
      scheme = alpha *( alpha | digit | "+" | "-" | "." )
      
      Convert the domain part to punicode if it does not look like a regular
      domain name. Only the domain part because RFC3986 specifies the the rest of
      the url may not contain special characters:
      https://tools.ietf.org/html/rfc3986#appendix-A
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L806>`__.
      
      :param string $url: The URL to be validated
      
   .. php:method:: intExplode(string $delimiter, string $string, bool $removeEmptyValues, int $limit)
   
      Explodes a $string delimited by $delimiter and casts each item in the array to (int).
      
      Corresponds to \TYPO3\CMS\Core\Utility\GeneralUtility::trimExplode(), but with conversion to integers for all values.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L850>`__.
      
      :param string $delimiter: Delimiter string to explode with
      :param string $string: The string to explode
      :param bool $removeEmptyValues: If set, all empty values (='') will NOT be set in output
      :param int $limit: If positive, the result will contain a maximum of limit elements,
      
   .. php:method:: revExplode(string $delimiter, string $string, int $count)
   
      Reverse explode which explodes the string counting from behind.
      
      Note: The delimiter has to given in the reverse order as
            it is occurring within the string.
      
      GeneralUtility::revExplode('[]', '[my][words][here]', 2)
        ==> array('[my][words', 'here]')
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L887>`__.
      
      :param string $delimiter: Delimiter string to explode with
      :param string $string: The string to explode
      :param int $count: Number of array entries
      
   .. php:method:: trimExplode(string $delim, string $string, bool $removeEmptyValues, int $limit)
   
      Explodes a string and removes whitespace-only values.
      
      If $removeEmptyValues is set, then all values that contain only whitespace are removed.
      
      Each item will have leading and trailing whitespace removed. However, if the tail items are
      returned as a single array item, their internal whitespace will not be modified.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L921>`__.
      
      :param string $delim: Delimiter string to explode with
      :param string $string: The string to explode
      :param bool $removeEmptyValues: If set, all empty values will be removed in output
      :param int $limit: If limit is set and positive, the returned array will contain a maximum of limit elements with
      the last element containing the rest of string. If the limit parameter is negative, all components
      except the last -limit are returned.
      :returntype: array
      :returns: Exploded values
      
   .. php:method:: implodeArrayForUrl(string $name, array $theArray, string $str, bool $skipBlank, bool $rawurlencodeParamName)
   
      Implodes a multidim-array into GET-parameters (eg. &param[key][key2]=value2&param[key][key3]=value3)
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L959>`__.
      
      :param string $name: Name prefix for entries. Set to blank if you wish none.
      :param array $theArray: The (multidimensional) array to implode
      :param string $str: (keep blank)
      :param bool $skipBlank: If set, parameters which were blank strings would be removed.
      :param bool $rawurlencodeParamName: If set, the param name itself (for example "param[key][key2]") would be rawurlencoded as well.
      
   .. php:method:: explodeUrl2Array(string $string)
   
      Explodes a string with GETvars (eg. "&id=1&type=2&ext[mykey]=3") into an array.
      
      Note! If you want to use a multi-dimensional string, consider this plain simple PHP code instead:
      
      $result = [];
      parse_str($queryParametersAsString, $result);
      
      However, if you do magic with a flat structure (e.g. keeping "ext[mykey]" as flat key in a one-dimensional array)
      then this method is for you.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L992>`__.
      
      :param string $string: GETvars string
      
   .. php:method:: removeDotsFromTS(array $ts)
   
      Removes dots "." from end of a key identifier of TypoScript styled array.
      
      array('key.' => array('property.' => 'value')) --> array('key' => array('property' => 'value'))
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L1012>`__.
      
      :param array $ts: TypoScript configuration array
      
   .. php:method:: get_tag_attributes(string $tag, bool $decodeEntities)
   
      Returns an array with all attributes of the input HTML tag as key/value pairs. Attributes are only lowercase a-z
      $tag is either a whole tag (eg '<TAG OPTION ATTRIB=VALUE>') or the parameter list (ex ' OPTION ATTRIB=VALUE>')
      If an attribute is empty, then the value for the key is empty. You can check if it existed with isset()
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L1040>`__.
      
      :param string $tag: HTML-tag string (or attributes only)
      :param bool $decodeEntities: Whether to decode HTML entities
      
   .. php:method:: split_tag_attributes(string $tag)
   
      Returns an array with the 'components' from an attribute list from an HTML tag. The result is normally analyzed by get_tag_attributes
      Removes tag-name if found
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L1076>`__.
      
      :param string $tag: HTML-tag string (or attributes only)
      
   .. php:method:: implodeAttributes(array<string,string> $arr, bool $xhtmlSafe, bool $dontOmitBlankAttribs)
   
      Implodes attributes in the array $arr for an attribute list in eg. and HTML tag (with quotes)
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L1112>`__.
      
      :param array<string,string> $arr: Array with attribute key/value pairs, eg. "bgcolor" => "red", "border" => "0"
      :param bool $xhtmlSafe: If set the resulting attribute list will have a) all attributes in lowercase (and duplicates weeded out, first entry taking precedence) and b) all values htmlspecialchar()'ed. It is recommended to use this switch!
      :param bool $dontOmitBlankAttribs: If TRUE, don't check if values are blank. Default is to omit attributes with blank values.
      
   .. php:method:: wrapJS(string $string)
   
      Wraps JavaScript code XHTML ready with <script>-tags
      Automatic re-indenting of the JS code is done by using the first line as indent reference.
      
      This is nice for indenting JS code with PHP code on the same level.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L1140>`__.
      
      :param string $string: JavaScript code
      
   .. php:method:: xml2tree(string $string, int $depth, array $parserOptions)
   
      Parses XML input into a PHP array with associative keys
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L1167>`__.
      
      :param string $string: XML data input
      :param int $depth: Number of element levels to resolve the XML into an array. Any further structure will be set as XML.
      :param array $parserOptions: Options that will be passed to PHP's xml_parser_set_option()
      
   .. php:method:: array2xml(array $array, string $NSprefix, int $level, string $docTag, int $spaceInd, array $options, array $stackData)
   
      Converts a PHP array into an XML string.
      
      The XML output is optimized for readability since associative keys are used as tag names.
      This also means that only alphanumeric characters are allowed in the tag names AND only keys NOT starting with numbers (so watch your usage of keys!). However there are options you can set to avoid this problem.
      Numeric keys are stored with the default tag name "numIndex" but can be overridden to other formats)
      The function handles input values from the PHP array in a binary-safe way; All characters below 32 (except 9,10,13) will trigger the content to be converted to a base64-string
      The PHP variable type of the data IS preserved as long as the types are strings, arrays, integers and booleans. Strings are the default type unless the "type" attribute is set.
      The output XML has been tested with the PHP XML-parser and parses OK under all tested circumstances with 4.x versions. However, with PHP5 there seems to be the need to add an XML prologue a la <?xml version="1.0" encoding="[charset]" standalone="yes" ?> - otherwise UTF-8 is assumed! Unfortunately, many times the output from this function is used without adding that prologue meaning that non-ASCII characters will break the parsing!! This sucks of course! Effectively it means that the prologue should always be prepended setting the right characterset, alternatively the system should always run as utf-8!
      However using MSIE to read the XML output didn't always go well: One reason could be that the character encoding is not observed in the PHP data. The other reason may be if the tag-names are invalid in the eyes of MSIE. Also using the namespace feature will make MSIE break parsing. There might be more reasons...
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L1247>`__.
      
      :param array $array: The input PHP array with any kind of data; text, binary, integers. Not objects though.
      :param string $NSprefix: tag-prefix, eg. a namespace prefix like "T3:"
      :param int $level: Current recursion level. Don't change, stay at zero!
      :param string $docTag: Alternative document tag. Default is "phparray".
      :param int $spaceInd: If greater than zero, then the number of spaces corresponding to this number is used for indenting, if less than zero - no indentation, if zero - a single TAB is used
      :param array $options: Options for the compilation. Key "useNindex" => 0/1 (boolean: whether to use "n0, n1, n2" for num. indexes); Key "useIndexTagForNum" => "[tag for numerical indexes]"; Key "useIndexTagForAssoc" => "[tag for associative indexes"; Key "parentTagMap" => array('parentTag' => 'thisLevelTag')
      :param array $stackData: Stack data. Don't touch.
      
   .. php:method:: xml2array(string $string, string $NSprefix, bool $reportDocTag)
   
      Converts an XML string to a PHP array.
      
      This is the reverse function of array2xml()
      This is a wrapper for xml2arrayProcess that adds a two-level cache
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L1366>`__.
      
      :param string $string: XML content to convert into an array
      :param string $NSprefix: The tag-prefix resolve, eg. a namespace like "T3:"
      :param bool $reportDocTag: If set, the document tag will be set in the key "_DOCUMENT_TAG" of the output array
      
   .. php:method:: xml2arrayProcess(string $string, string $NSprefix, bool $reportDocTag)
   
      Converts an XML string to a PHP array.
      
      This is the reverse function of array2xml()
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L1389>`__.
      
      :param string $string: XML content to convert into an array
      :param string $NSprefix: The tag-prefix resolve, eg. a namespace like "T3:"
      :param bool $reportDocTag: If set, the document tag will be set in the key "_DOCUMENT_TAG" of the output array
      
   .. php:method:: xmlRecompileFromStructValArray(array<int,array<string,mixed>> $vals)
   
      This implodes an array of XML parts (made with xml_parse_into_struct()) into XML again.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L1495>`__.
      
      :param array<int,array<string,mixed>> $vals: An array of XML parts, see xml2tree
      
   .. php:method:: getUrl(string $url)
   
      Reads the file or url $url and returns the content
      If you are having trouble with proxies when reading URLs you can configure your way out of that with settings within $GLOBALS['TYPO3_CONF_VARS']['HTTP'].
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L1545>`__.
      
      :param string $url: File/URL to read
      
   .. php:method:: writeFile(string $file, string $content, bool $changePermissions)
   
      Writes $content to the file $file
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L1570>`__.
      
      :param string $file: Filepath to write to
      :param string $content: Content to write
      :param bool $changePermissions: If TRUE, permissions are forced to be set
      
   .. php:method:: fixPermissions(string $path, bool $recursive)
   
      Sets the file system mode and group ownership of a file or a folder.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L1597>`__.
      
      :param string $path: Path of file or folder, must not be escaped. Path can be absolute or relative
      :param bool $recursive: If set, also fixes permissions of files and folders in the folder (if $path is a folder)
      
   .. php:method:: writeFileToTypo3tempDir(string $filepath, string $content)
   
      Writes $content to a filename in the typo3temp/ folder (and possibly one or two subfolders...)
      Accepts an additional subdirectory in the file path!
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L1662>`__.
      
      :param string $filepath: Absolute file path to write within the typo3temp/ or Environment::getVarPath() folder - the file path must be prefixed with this path
      :param string $content: Content string to write
      
   .. php:method:: mkdir(string $newFolder)
   
      Wrapper function for mkdir.
      
      Sets folder permissions according to $GLOBALS['TYPO3_CONF_VARS']['SYS']['folderCreateMask']
      and group ownership according to $GLOBALS['TYPO3_CONF_VARS']['SYS']['createGroup']
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L1739>`__.
      
      :param string $newFolder: Absolute path to folder, see PHP mkdir() function. Removes trailing slash internally.
      
   .. php:method:: mkdir_deep(string $directory)
   
      Creates a directory - including parent directories if necessary and
      sets permissions on newly created directories.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L1756>`__.
      
      :param string $directory: Target directory to create
      
   .. php:method:: rmdir(string $path, bool $removeNonEmpty)
   
      Wrapper function for rmdir, allowing recursive deletion of folders and files
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L1809>`__.
      
      :param string $path: Absolute path to folder, see PHP rmdir() function. Removes trailing slash internally.
      :param bool $removeNonEmpty: Allow deletion of non-empty directories
      
   .. php:method:: get_dirs(string $path)
   
      Returns an array with the names of folders in a specific path
      Will return 'error' (string) if there were an error with reading directory content.
      
      Will return null if provided path is false.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L1866>`__.
      
      :param string $path: Path to list directories from
      
   .. php:method:: getFilesInDir(string $path, string $extensionList, bool $prependPath, string $order, string $excludePattern)
   
      Finds all files in a given path and returns them as an array. Each
      array key is a md5 hash of the full path to the file. This is done because
      'some' extensions like the import/export extension depend on this.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L1897>`__.
      
      :param string $path: The path to retrieve the files from.
      :param string $extensionList: A comma-separated list of file extensions. Only files of the specified types will be retrieved. When left blank, files of any type will be retrieved.
      :param bool $prependPath: If TRUE, the full path to the file is returned. If FALSE only the file name is returned.
      :param string $order: The sorting order. The default sorting order is alphabetical. Setting $order to 'mtime' will sort the files by modification time.
      :param string $excludePattern: A regular expression pattern of file names to exclude. For example: 'clear.gif' or '(clear.gif|.htaccess)'. The pattern will be wrapped with: '/^' and '$/'.
      
   .. php:method:: getAllFilesAndFoldersInPath(string[] $fileArr, string $path, string $extList, bool $regDirs, int $recursivityLevels, string $excludePattern)
   
      Recursively gather all files and folders of a path.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L1962>`__.
      
      :param string[] $fileArr: Empty input array (will have files added to it)
      :param string $path: The path to read recursively from (absolute) (include trailing slash!)
      :param string $extList: Comma list of file extensions: Only files with extensions in this list (if applicable) will be selected.
      :param bool $regDirs: If set, directories are also included in output.
      :param int $recursivityLevels: The number of levels to dig down...
      :param string $excludePattern: regex pattern of files/directories to exclude
      
   .. php:method:: removePrefixPathFromList(string[] $fileArr, string $prefixToRemove)
   
      Removes the absolute part of all files/folders in fileArr
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L1986>`__.
      
      :param string[] $fileArr: The file array to remove the prefix from
      :param string $prefixToRemove: The prefix path to remove (if found as first part of string!)
      
   .. php:method:: fixWindowsFilePath(string $theFile)
   
      Fixes a path for windows-backslashes and reduces double-slashes to single slashes
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L2005>`__.
      
      :param string $theFile: File path to process
      
   .. php:method:: resolveBackPath(string $pathStr)
   
      Resolves "../" sections in the input path string.
      
      For example "fileadmin/directory/../other_directory/" will be resolved to "fileadmin/other_directory/"
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L2017>`__.
      
      :param string $pathStr: File path in which "/../" is resolved
      
   .. php:method:: locationHeaderUrl(string $path)
   
      Prefixes a URL used with 'header-location' with 'http://...' depending on whether it has it already.
      
      - If already having a scheme, nothing is prepended
      - If having REQUEST_URI slash '/', then prefixing 'http://[host]' (relative to host)
      - Otherwise prefixed with TYPO3_REQUEST_DIR (relative to current dir / TYPO3_REQUEST_DIR)
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L2050>`__.
      
      :param string $path: URL / path to prepend full URL addressing to.
      
   .. php:method:: getMaxUploadFileSize()
   
      Returns the maximum upload size for a file that is allowed. Measured in KB.
      
      This might be handy to find out the real upload limit that is possible for this
      TYPO3 installation.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L2077>`__.
      
      
   .. php:method:: getBytesFromSizeMeasurement(string $measurement)
   
      Gets the bytes value from a measurement string like "100k".
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L2097>`__.
      
      :param string $measurement: The measurement (e.g. "100k")
      
   .. php:method:: createVersionNumberedFilename(string $file)
   
      Function for static version numbers on files, based on the filemtime
      
      This will make the filename automatically change when a file is
      changed, and by that re-cached by the browser. If the file does not
      exist physically the original file passed to the function is
      returned without the timestamp.
      
      Behaviour is influenced by the setting
      TYPO3_CONF_VARS['BE' and 'FE'][versionNumberInFilename]
      = TRUE (BE) / "embed" (FE) : modify filename
      = FALSE (BE) / "querystring" (FE) : add timestamp as parameter
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L2126>`__.
      
      :param string $file: Relative path to file including all potential query parameters (not htmlspecialchared yet)
      
   .. php:method:: writeJavaScriptContentToTemporaryFile(string $content)
   
      Writes string to a temporary file named after the md5-hash of the string
      Quite useful for extensions adding their custom built JavaScript during runtime.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L2182>`__.
      
      :param string $content: JavaScript to write to file.
      
   .. php:method:: writeStyleSheetContentToTemporaryFile(string $content)
   
      Writes string to a temporary file named after the md5-hash of the string
      Quite useful for extensions adding their custom built StyleSheet during runtime.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L2198>`__.
      
      :param string $content: CSS styles to write to file.
      
   .. php:method:: linkThisScript(array $getParams)
   
      Returns the link-url to the current script.
      
      In $getParams you can set associative keys corresponding to the GET-vars you wish to add to the URL. If you set them empty, they will remove existing GET-vars from the current URL.
      REMEMBER to always use htmlspecialchars() for content in href-properties to get ampersands converted to entities (XHTML requirement and XSS precaution)
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L2221>`__.
      
      :param array $getParams: Array of GET parameters to include
      
   .. php:method:: getIndpEnv(string $getEnvName)
   
      Abstraction method which returns System Environment Variables regardless of server OS, CGI/MODULE version etc. Basically this is SERVER variables for most of them.
      
      This should be used instead of getEnv() and $_SERVER/ENV_VARS to get reliable values for all situations.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L2256>`__.
      
      :param string $getEnvName: Name of the "environment variable"/"server variable" you wish to use. Valid values are SCRIPT_NAME, SCRIPT_FILENAME, REQUEST_URI, PATH_INFO, REMOTE_ADDR, REMOTE_HOST, HTTP_REFERER, HTTP_HOST, HTTP_USER_AGENT, HTTP_ACCEPT_LANGUAGE, QUERY_STRING, TYPO3_DOCUMENT_ROOT, TYPO3_HOST_ONLY, TYPO3_HOST_ONLY, TYPO3_REQUEST_HOST, TYPO3_REQUEST_URL, TYPO3_REQUEST_SCRIPT, TYPO3_REQUEST_DIR, TYPO3_SITE_URL, _ARRAY
      
   .. php:method:: getFileAbsFileName(string $filename)
   
      Returns the absolute filename of a relative reference, resolves the "EXT:" prefix
      (way of referring to files inside extensions) and checks that the file is inside
      the TYPO3's base folder and implies a check with
      \TYPO3\CMS\Core\Utility\GeneralUtility::validPathStr().
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L2570>`__.
      
      :param string $filename: The input filename/filepath to evaluate
      
   .. php:method:: validPathStr(string $theFile)
   
      Checks for malicious file paths.
      
      Returns TRUE if no '//', '..', '\' or control characters are found in the $theFile.
      This should make sure that the path is not pointing 'backwards' and further doesn't contain double/back slashes.
      So it's compatible with the UNIX style path strings valid for TYPO3 internally.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L2610>`__.
      
      :param string $theFile: File path to evaluate
      
   .. php:method:: isAllowedAbsPath(string $path)
   
      Returns TRUE if the path is absolute, without backpath '..' and within TYPO3s project or public folder OR within the lockRootPath
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L2622>`__.
      
      :param string $path: File path to evaluate
      
   .. php:method:: copyDirectory(string $source, string $destination)
   
      Low level utility function to copy directories and content recursive
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L2642>`__.
      
      :param string $source: Path to source directory, relative to document root or absolute
      :param string $destination: Path to destination directory, relative to document root or absolute
      
   .. php:method:: sanitizeLocalUrl(string $url)
   
      Checks if a given string is a valid frame URL to be loaded in the
      backend.
      
      If the given url is empty or considered to be harmless, it is returned
      as is, else the event is logged and an empty string is returned.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L2678>`__.
      
      :param string $url: potential URL to check
      
   .. php:method:: upload_copy_move(string $source, string $destination)
   
      Moves $source file to $destination if uploaded, otherwise try to make a copy
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L2717>`__.
      
      :param string $source: Source file, absolute path
      :param string $destination: Destination file, absolute path
      
   .. php:method:: upload_to_tempfile(string $uploadedFileName)
   
      Will move an uploaded file (normally in "/tmp/xxxxx") to a temporary filename in Environment::getProjectPath() . "var/" from where TYPO3 can use it.
      
      Use this function to move uploaded files to where you can work on them.
      REMEMBER to use \TYPO3\CMS\Core\Utility\GeneralUtility::unlink_tempfile() afterwards - otherwise temp-files will build up! They are NOT automatically deleted in the temporary folder!
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L2752>`__.
      
      :param string $uploadedFileName: The temporary uploaded filename, eg. $_FILES['[upload field name here]']['tmp_name']
      
   .. php:method:: unlink_tempfile(string $uploadedTempFileName)
   
      Deletes (unlink) a temporary filename in the var/ or typo3temp folder given as input.
      
      The function will check that the file exists, is within TYPO3's var/ or typo3temp/ folder and does not contain back-spaces ("../") so it should be pretty safe.
      Use this after upload_to_tempfile() or tempnam() from this class!
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L2781>`__.
      
      :param string $uploadedTempFileName: absolute file path - must reside within var/ or typo3temp/ folder.
      
   .. php:method:: tempnam(string $filePrefix, string $fileSuffix)
   
      Create temporary filename (Create file with unique file name)
      This function should be used for getting temporary file names - will make your applications safe for open_basedir = on
      REMEMBER to delete the temporary files after use! This is done by \TYPO3\CMS\Core\Utility\GeneralUtility::unlink_tempfile()
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L2813>`__.
      
      :param string $filePrefix: Prefix for temporary file
      :param string $fileSuffix: Suffix for temporary file, for example a special file extension
      
   .. php:method:: callUserFunction(non-empty-string|\Closure $funcName, mixed $params, object|null $ref)
   
      Calls a user-defined function/method in class
      Such a function/method should look like this: "function proc(&$params, &$ref) {...}"
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L2842>`__.
      
      :param non-empty-string|\Closure $funcName: Function/Method reference or Closure.
      :param mixed $params: Parameters to be pass along (typically an array) (REFERENCE!)
      :param object|null $ref: Reference to be passed along (typically "$this" - being a reference to the calling object)
      
   .. php:method:: makeInstance(string|class-string<\T> $className, array<int,mixed> $constructorArguments)
   
      Creates an instance of a class taking into account the class-extensions
      API of TYPO3. USE THIS method instead of the PHP "new" keyword.
      
      Eg. "$obj = new myclass;" should be "$obj = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstance("myclass")" instead!
      
      You can also pass arguments for a constructor:
      \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstance(\myClass::class, $arg1, $arg2, ..., $argN)
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L2913>`__.
      
      :param string|class-string<\T> $className: name of the class to instantiate, must not be empty and not start with a backslash
      :param array<int,mixed> $constructorArguments: Arguments for the constructor
      
   .. php:method:: addInstance()
   
      Sets the instance of a non-singleton class to be returned by makeInstance.
      
      If this function is called multiple times for the same $className,
      makeInstance will return the instances in the order in which they have
      been added (FIFO).
      
      Warning: This is a helper method for unit tests. Do not call this directly in production code!
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L3146>`__.
      
      
   .. php:method:: purgeInstances()
   
      Purge all instances returned by makeInstance.
      
      This function is most useful when called from tearDown in a test case
      to drop any instances that have been created by the tests.
      
      Warning: This is a helper method for unit tests. Do not call this directly in production code!
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L3186>`__.
      
      
   .. php:method:: makeInstanceService(string $serviceType, string $serviceSubType, array $excludeServiceKeys)
   
      Find the best service and check if it works.
      
      Returns object of the service class.
      
      This method is used for the legacy ExtensionManager:addService() mechanism,
      not with Dependency-Injected services. In practice, all remaining core uses of
      this mechanism are authentication services, which all have an info property.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L3219>`__.
      
      :param string $serviceType: Type of service (service key).
      :param string $serviceSubType: Sub type like file extensions or similar. Defined by the service.
      :param array $excludeServiceKeys: List of service keys which should be excluded in the search for a service
      :returntype: object|array|false
      :returns: The service object or an array with error infos, or false if no service was found.
      
   .. php:method:: quoteJSvalue(string $value)
   
      Quotes a string for usage as JS parameter.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L3264>`__.
      
      :param string $value: the string to encode, may be empty
      
   .. php:method:: jsonEncodeForHtmlAttribute()
   
      Serializes data to JSON, to be used in HTML attribute, e.g.
      
      `<div data-value="[[JSON]]">...</div>`
      (`[[JSON]]` represents return value of this function)
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L3295>`__.
      
      :returntype: string
      
   .. php:method:: jsonEncodeForJavaScript()
   
      Serializes data to JSON, to be used in JavaScript instructions, e.g.
      
      `<script>const value = JSON.parse('[[JSON]]');</script>`
      (`[[JSON]]` represents return value of this function)
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/GeneralUtility.php#L3310>`__.
      
      :returntype: string
