.. Generated by https://github.com/linawolf/t3docs_restructured_api_tools 
.. php:namespace::  TYPO3\CMS\Core\Utility

.. php:class:: ArrayUtility

   Class with helper functions for array handling
   
   See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ArrayUtility.php>`__.

   .. php:method:: convertBooleanStringsToBooleanRecursive(array array)
   
      Recursively convert 'true' and 'false' strings to boolean values.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ArrayUtility.php#L50>`__.
      
      :param array $array: the array
      :returntype: array
      
   .. php:method:: filterByValueRecursive(mixed $needle, array $haystack)
   
      Reduce an array by a search value and keep the array structure.
      
      Comparison is type strict:
      - For a given needle of type string, integer, array or boolean,
      value and value type must match to occur in result array
      - For a given object, an object within the array must be a reference to
      the same object to match (not just different instance of same class)
      
      Example:
      - Needle: 'findMe'
      - Given array:
      array(
        'foo' => 'noMatch',
        'bar' => 'findMe',
        'foobar => array(
          'foo' => 'findMe',
        ),
      );
      - Result:
      array(
        'bar' => 'findMe',
        'foobar' => array(
          'foo' => findMe',
        ),
      );
      
      See the unit tests for more examples and expected behaviour
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ArrayUtility.php#L100>`__.
      
      :param mixed $needle: The value to search for
      :param array $haystack: The array in which to search
      :returntype: array
      :returns: $haystack array reduced matching $needle values
      
   .. php:method:: isValidPath(array $array, string $path, string $delimiter)
   
      Checks if a given path exists in array
      
      Example:
      - array:
      array(
        'foo' => array(
          'bar' = 'test',
        )
      );
      - path: 'foo/bar'
      - return: TRUE
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ArrayUtility.php#L140>`__.
      
      :param array $array: Given array
      :param string $path: Path to test, 'foo/bar/foobar'
      :param string $delimiter: Delimiter for path, default /
      :returntype: bool
      :returns: TRUE if path exists in array
      
   .. php:method:: getValueByPath(array $array, array|string $path, string $delimiter)
   
      Returns a value by given path
      
      Example
      - array:
      array(
        'foo' => array(
          'bar' => array(
            'baz' => 42
          )
        )
      );
      - path: foo/bar/baz
      - return: 42
      
      If a path segments contains a delimiter character, the path segment
      must be enclosed by " (double quote), see unit tests for details
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ArrayUtility.php#L176>`__.
      
      :param array $array: Input array
      :param array|string $path: Path within the array
      :param string $delimiter: Defined path delimiter, default /
      :returntype: mixed
      
   .. php:method:: reIndexNumericArrayKeysRecursive(array array)
   
      Reindex keys from the current nesting level if all keys within
      the current nesting level are integers.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ArrayUtility.php#L204>`__.
      
      :param array $array: the array
      :returntype: array
      
   .. php:method:: removeNullValuesRecursive(array array)
   
      Recursively remove keys if their value are NULL.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ArrayUtility.php#L222>`__.
      
      :param array $array: the array
      :returntype: array
      
   .. php:method:: setValueByPath(array $array, string|array|\ArrayAccess $path, mixed $value, string $delimiter)
   
      Modifies or sets a new value in an array by given path
      
      Example:
      - array:
      array(
        'foo' => array(
          'bar' => 42,
        ),
      );
      - path: foo/bar
      - value: 23
      - return:
      array(
        'foo' => array(
          'bar' => 23,
        ),
      );
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ArrayUtility.php#L261>`__.
      
      :param array $array: Input array to manipulate
      :param string|array|\ArrayAccess $path: Path in array to search for
      :param mixed $value: Value to set at path location in array
      :param string $delimiter: Path delimiter
      :returntype: array
      :returns: Modified array
      
   .. php:method:: removeByPath(array $array, string $path, string $delimiter)
   
      Remove a sub part from an array specified by path
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ArrayUtility.php#L303>`__.
      
      :param array $array: Input array to manipulate
      :param string $path: Path to remove from array
      :param string $delimiter: Path delimiter
      :returntype: array
      :returns: Modified array
      
   .. php:method:: sortByKeyRecursive(array $array)
   
      Sorts an array recursively by key
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ArrayUtility.php#L338>`__.
      
      :param array $array: Array to sort recursively by key
      :returntype: array
      :returns: Sorted array
      
   .. php:method:: sortArraysByKey(array $arrays, string $key, bool $ascending)
   
      Sort an array of arrays by a given key using uasort
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ArrayUtility.php#L358>`__.
      
      :param array $arrays: Array of arrays to sort
      :param string $key: Key to sort after
      :param bool $ascending: Set to TRUE for ascending order, FALSE for descending order
      :returntype: array
      :returns: Array of sorted arrays
      
   .. php:method:: arrayExport(array $array, int $level)
   
      Exports an array as string.
      
      Similar to var_export(), but representation follows the PSR-2 and TYPO3 core CGL.
      
      See unit tests for detailed examples
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ArrayUtility.php#L386>`__.
      
      :param array $array: Array to export
      :param int $level: Internal level used for recursion, do *not* set from outside!
      :returntype: string
      :returns: String representation of array
      
   .. php:method:: flatten(array $array, string $prefix)
   
      Converts a multidimensional array to a flat representation.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ArrayUtility.php#L470>`__.
      
      :param array $array: The (relative) array to be converted
      :param string $prefix: The (relative) prefix to be used (e.g. 'section.')
      :returntype: array
      
   .. php:method:: intersectRecursive(array $source, array $mask)
   
      Determine the intersections between two arrays, recursively comparing keys
      A complete sub array of $source will be preserved, if the key exists in $mask.
      
      See unit tests for more examples and edge cases.
      
      Example:
      - source:
      array(
        'key1' => 'bar',
        'key2' => array(
          'subkey1' => 'sub1',
          'subkey2' => 'sub2',
        ),
        'key3' => 'baz',
      )
      - mask:
      array(
        'key1' => NULL,
        'key2' => array(
          'subkey1' => exists',
        ),
      )
      - return:
      array(
        'key1' => 'bar',
        'key2' => array(
          'subkey1' => 'sub1',
        ),
      )
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ArrayUtility.php#L551>`__.
      
      :param array $source: Source array
      :param array $mask: Array that has the keys which should be kept in the source array
      :returntype: array
      :returns: Keys which are present in both arrays with values of the source array
      
   .. php:method:: renumberKeysToAvoidLeapsIfKeysAreAllNumeric(array $array, int $level)
   
      Renumber the keys of an array to avoid leaps if keys are all numeric.
      
      Is called recursively for nested arrays.
      
      Example:
      
      Given
       array(0 => 'Zero' 1 => 'One', 2 => 'Two', 4 => 'Three')
      as input, it will return
       array(0 => 'Zero' 1 => 'One', 2 => 'Two', 3 => 'Three')
      
      Will treat keys string representations of number (ie. '1') equal to the
      numeric value (ie. 1).
      
      Example:
      Given
       array('0' => 'Zero', '1' => 'One' )
      it will return
       array(0 => 'Zero', 1 => 'One')
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ArrayUtility.php#L595>`__.
      
      :param array $array: Input array
      :param int $level: Internal level used for recursion, do *not* set from outside!
      :returntype: array
      
   .. php:method:: mergeRecursiveWithOverrule(array $original, array $overrule, bool $addKeys, bool $includeEmptyValues, bool $enableUnsetFeature)
   
      Merges two arrays recursively and "binary safe" (integer keys are
      overridden as well), overruling similar values in the original array
      with the values of the overrule array.
      
      In case of identical keys, ie. keeping the values of the overrule array.
      
      This method takes the original array by reference for speed optimization with large arrays
      
      The differences to the existing PHP function array_merge_recursive() are:
       * Keys of the original array can be unset via the overrule array. ($enableUnsetFeature)
       * Much more control over what is actually merged. ($addKeys, $includeEmptyValues)
       * Elements or the original array get overwritten if the same key is present in the overrule array.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ArrayUtility.php#L636>`__.
      
      :param array $original: Original array. It will be *modified* by this method and contains the result afterwards!
      :param array $overrule: Overrule array, overruling the original array
      :param bool $addKeys: If set to FALSE, keys that are NOT found in $original will not be set. Thus only existing value can/will be overruled from overrule array.
      :param bool $includeEmptyValues: If set, values from $overrule will overrule if they are empty or zero.
      :param bool $enableUnsetFeature: If set, special values "__UNSET" can be used in the overrule array in order to unset array keys in the original array.
      
   .. php:method:: removeArrayEntryByValue(array $array, string $cmpValue)
   
      Removes the value $cmpValue from the $array if found there. Returns the modified array
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ArrayUtility.php#L665>`__.
      
      :param array $array: Array containing the values
      :param string $cmpValue: Value to search for and if found remove array entry where found.
      :returntype: array
      :returns: Output array with entries removed if search string is found
      
   .. php:method:: keepItemsInArray(array $array, array|string|null $keepItems, callable|null $getValueFunc)
   
      Filters an array to reduce its elements to match the condition.
      
      The values in $keepItems can be optionally evaluated by a custom callback function.
      
      Example (arguments used to call this function):
      $array = array(
      array('aa' => array('first', 'second'),
      array('bb' => array('third', 'fourth'),
      array('cc' => array('fifth', 'sixth'),
      );
      $keepItems = array('third');
      $getValueFunc = function($value) { return $value[0]; }
      
      Returns:
      array(
      array('bb' => array('third', 'fourth'),
      )
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ArrayUtility.php#L700>`__.
      
      :param array $array: $array The initial array to be filtered/reduced
      :param array|string|null $keepItems: The items which are allowed/kept in the array - accepts array or csv string
      :param callable|null $getValueFunc: (optional) Callback function used to get the value to keep
      :returntype: array
      :returns: The filtered/reduced array with the kept items
      
   .. php:method:: remapArrayKeys(array $array, array $mappingTable)
   
      Rename Array keys with a given mapping table
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ArrayUtility.php#L740>`__.
      
      :param array $array: Array by reference which should be remapped
      :param array $mappingTable: Array with remap information, array/$oldKey => $newKey)
      
   .. php:method:: arrayDiffKeyRecursive(array $array1, array $array2)
   
      Filters keys off from first array that also exist in second array. Comparison is done by keys.
      
      This method is a recursive version of php array_diff_key()
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ArrayUtility.php#L758>`__.
      
      :param array $array1: Source array
      :param array $array2: Reduce source array by this array
      :returntype: array
      :returns: Source array reduced by keys also present in second array
      
   .. php:method:: arrayDiffAssocRecursive(array $array1, array $array2)
   
      Filters values off from first array that also exist in second array. Comparison is done by keys.
      
      This method is a recursive version of php array_diff_assoc()
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ArrayUtility.php#L784>`__.
      
      :param array $array1: Source array
      :param array $array2: Reduce source array by this array
      :returntype: array
      :returns: Source array reduced by values also present in second array, indexed by key
      
   .. php:method:: naturalKeySortRecursive(array $array)
   
      Sorts an array by key recursive - uses natural sort order (aAbB-zZ)
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ArrayUtility.php#L808>`__.
      
      :param array $array: array to be sorted recursively, passed by reference
      :returntype: bool
      :returns: always TRUE
      
   .. php:method:: filterAndSortByNumericKeys(array $setupArr, bool $acceptAnyKeys)
   
      Takes a TypoScript array as input and returns an array which contains all integer properties found which had a value (not only properties). The output array will be sorted numerically.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ArrayUtility.php#L829>`__.
      
      :param array $setupArr: TypoScript array with numerical array in
      :param bool $acceptAnyKeys: If set, then a value is not required - the properties alone will be enough.
      :returntype: array
      :returns: An array with all integer properties listed in numeric order.
      
   .. php:method:: sortArrayWithIntegerKeys(array array)
   
      If the array contains numerical keys only, sort it in ascending order
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ArrayUtility.php#L846>`__.
      
      :param array $array: the array
      :returntype: array
      
   .. php:method:: sortArrayWithIntegerKeysRecursive(array array)
   
      Sort keys from the current nesting level if all keys within the
      current nesting level are integers.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ArrayUtility.php#L860>`__.
      
      :param array $array: the array
      :returntype: array
      
   .. php:method:: stripTagsFromValuesRecursive(array array)
   
      Recursively translate values.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ArrayUtility.php#L874>`__.
      
      :param array $array: the array
      :returntype: array
      
   .. php:method:: filterRecursive(array array, callable callback = NULL)
   
      Recursively filter an array
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ArrayUtility.php#L892>`__.
      
      :param array $array: the array
      :param callable $callback: the callback, default: NULL
      :returntype: array
