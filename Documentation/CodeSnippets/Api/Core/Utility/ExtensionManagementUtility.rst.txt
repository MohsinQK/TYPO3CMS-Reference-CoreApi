.. Generated by https://github.com/linawolf/t3docs_restructured_api_tools 
.. php:namespace::  TYPO3\CMS\Core\Utility

.. php:class:: ExtensionManagementUtility

   Extension Management functions
   
   This class is never instantiated, rather the methods inside is called as functions like
   \TYPO3\CMS\Core\Utility\ExtensionManagementUtility::isLoaded('my_extension');
   
   See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php>`__.

   
   .. php:method:: isLoaded(string key)
   
      Returns TRUE if the extension with extension key $key is loaded.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L92>`__.
      
      :param string $key: the key
      :returntype: bool
      
   .. php:method:: extPath(string $key, string $script)
   
      Returns the absolute path to the extension with extension key $key.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L120>`__.
      
      :param string $key: Extension key
      :param string $script: $script is appended to the output if set.
      :returntype: string
      
   .. php:method:: getExtensionVersion(string $key)
   
      Retrieves the version of an installed extension.
      
      If the extension is not installed, this function returns an empty string.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L152>`__.
      
      :param string $key: The key of the extension to look up; must not be empty.
      :returntype: string
      :returns: The extension version as a string in the format "x.y.z",
      
   .. php:method:: addTCAcolumns(string $table, array $columnArray)
   
      Adding fields to an existing table definition in $GLOBALS['TCA']
      Adds an array with $GLOBALS['TCA'] column-configuration to the $GLOBALS['TCA']-entry for that table.
      
      This function adds the configuration needed for rendering of the field in TCEFORMS - but it does NOT add the field names to the types lists!
      So to have the fields displayed you must also call fx. addToAllTCAtypes or manually add the fields to the types list.
      FOR USE IN files in Configuration/TCA/Overrides/*.php . Use in ext_tables.php FILES may break the frontend.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L184>`__.
      
      :param string $table: The table name of a table already present in $GLOBALS['TCA'] with a columns section
      :param array $columnArray: The array with the additional columns (typical some fields an extension wants to add)
      
   .. php:method:: addToAllTCAtypes(string $table, string $newFieldsString, string $typeList, string $position)
   
      Makes fields visible in the TCEforms, adding them to the end of (all) "types"-configurations
      
      Adds a string $string (comma separated list of field names) to all ["types"][xxx]["showitem"] entries for table $table (unless limited by $typeList)
      This is needed to have new fields shown automatically in the TCEFORMS of a record from $table.
      Typically this function is called after having added new columns (database fields) with the addTCAcolumns function
      FOR USE IN files in Configuration/TCA/Overrides/*.php Use in ext_tables.php FILES may break the frontend.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L205>`__.
      
      :param string $table: Table name
      :param string $newFieldsString: Field list to add.
      :param string $typeList: Comma-separated list of specific types to add the field list to. (If empty, all type entries are affected)
      :param string $position: Insert fields before (default) or after one, or replace a field
      
   .. php:method:: addFieldsToAllPalettesOfField(string $table, string $field, string $addFields, string $insertionPosition)
   
      Adds new fields to all palettes that is defined after an existing field.
      
      If the field does not have a following palette yet, it's created automatically
      and gets called "generatedFor-$field".
      FOR USE IN files in Configuration/TCA/Overrides/*.php Use in ext_tables.php FILES may break the frontend.
      
      See unit tests for more examples and edge cases.
      
      Example:
      
      'aTable' => array(
      	'types' => array(
      		'aType' => array(
      			'showitem' => 'aField, --palette--;;aPalette',
      		),
      	),
      	'palettes' => array(
      		'aPalette' => array(
      			'showitem' => 'fieldB, fieldC',
      		),
      	),
      ),
      
      Calling addFieldsToAllPalettesOfField('aTable', 'aField', 'newA', 'before: fieldC') results in:
      
      'aTable' => array(
      	'types' => array(
      		'aType' => array(
      			'showitem' => 'aField, --palette--;;aPalette',
      		),
      	),
      	'palettes' => array(
      		'aPalette' => array(
      			'showitem' => 'fieldB, newA, fieldC',
      		),
      	),
      ),
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L333>`__.
      
      :param string $table: Name of the table
      :param string $field: Name of the field that has the palette to be extended
      :param string $addFields: Comma-separated list of fields to be added to the palette
      :param string $insertionPosition: Insert fields before (default) or after one
      
   .. php:method:: addFieldsToPalette(string $table, string $palette, string $addFields, string $insertionPosition)
   
      Adds new fields to a palette.
      
      If the palette does not exist yet, it's created automatically.
      FOR USE IN files in Configuration/TCA/Overrides/*.php Use in ext_tables.php FILES may break the frontend.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L386>`__.
      
      :param string $table: Name of the table
      :param string $palette: Name of the palette to be extended
      :param string $addFields: Comma-separated list of fields to be added to the palette
      :param string $insertionPosition: Insert fields before (default) or after one
      
   .. php:method:: addTcaSelectItem(string $table, string $field, array $item, string $relativeToField, string $relativePosition)
   
      Add an item to a select field item list.
      
      Warning: Do not use this method for radio or check types, especially not
      with $relativeToField and $relativePosition parameters. This would shift
      existing database data 'off by one'.
      FOR USE IN files in Configuration/TCA/Overrides/*.php Use in ext_tables.php FILES may break the frontend.
      
      As an example, this can be used to add an item to tt_content CType select
      drop-down after the existing 'mailform' field with these parameters:
      - $table = 'tt_content'
      - $field = 'CType'
      - $item = array(
      'LLL:EXT:frontend/Resources/Private/Language/locallang_ttc.xlf:CType.I.10',
      'login',
      'i/imagename.gif',
      ),
      - $relativeToField = mailform
      - $relativePosition = after
      
      $item has an optional fourth parameter for the groupId (string), to attach the
      new item to. The groupname is defined when a group is added with addTcaSelectItemGroup
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L430>`__.
      
      :param string $table: Name of TCA table
      :param string $field: Name of TCA field
      :param array $item: New item to add
      :param string $relativeToField: Add item relative to existing field
      :param string $relativePosition: Valid keywords: 'before', 'after'
      
   .. php:method:: addTcaSelectItemGroup(string $table, string $field, string $groupId, string $groupLabel, string|null $position)
   
      Adds an item group to a TCA select field, allows to add a group so addTcaSelectItem() can add a groupId
      with a label and its position within other groups.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L477>`__.
      
      :param string $table: the table name in TCA - e.g. tt_content
      :param string $field: the field name in TCA - e.g. CType
      :param string $groupId: the unique identifier for a group, where all items from addTcaSelectItem() with a group ID are connected
      :param string $groupLabel: the label e.g. LLL:EXT:my_extension/Resources/Private/Language/locallang_tca.xlf:group.mygroupId
      :param string|null $position: e.g. "before:special", "after:default" (where the part after the colon is an existing groupId) or "top" or "bottom"
      
   .. php:method:: getFileFieldTCAConfig(string $fieldName, array $customSettingOverride, string $allowedFileExtensions, string $disallowedFileExtensions)
   
      Gets the TCA configuration for a field handling (FAL) files.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L537>`__.
      
      :param string $fieldName: Name of the field to be used
      :param array $customSettingOverride: Custom field settings overriding the basics
      :param string $allowedFileExtensions: Comma-separated list of allowed file extensions (e.g. "jpg,gif,pdf")
      :param string $disallowedFileExtensions: Comma-separated list of disallowed file extensions (e.g. "doc,docx")
      :returntype: array
      
   .. php:method:: addFieldsToUserSettings(string $addFields, string $insertionPosition)
   
      Adds a list of new fields to the TYPO3 USER SETTINGS configuration "showitem" list, the array with
      the new fields itself needs to be added additionally to show up in the user setup, like
      $GLOBALS['TYPO3_USER_SETTINGS']['columns'] += $tempColumns
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L600>`__.
      
      :param string $addFields: List of fields to be added to the user settings
      :param string $insertionPosition: Insert fields before (default) or after one
      
   .. php:method:: allowTableOnStandardPages(string $table)
   
      Add tablename to default list of allowed tables on pages (in $PAGES_TYPES)
      Will add the $table to the list of tables allowed by default on pages as setup by $PAGES_TYPES['default']['allowedTables']
      FOR USE IN ext_tables.php FILES
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L718>`__.
      
      :param string $table: Table name
      
   .. php:method:: addModule(unknown main, unknown sub = '', unknown position = '', unknown path = NULL, unknown moduleConfiguration = array (
   ))
   
      To allow extension authors to support multiple versions, this method is kept until
      TYPO3 v13, but is no longer used nor evaluated from TYPO3 v12.0. To add modules,
      place the configuration in your extensions' Configuration/Backend/Modules.php file.
      
      The method deliberately does not throw a deprecation warning in order to keep the noise
      of deprecation warnings small.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L734>`__.
      
      :param unknown $main: the main
      :param unknown $sub: the sub, default: ''
      :param unknown $position: the position, default: ''
      :param unknown $path: the path, default: NULL
      :param unknown $moduleConfiguration: the moduleConfiguration, default: array (
      )
      
   .. php:method:: insertModuleFunction(string $modname, string $className, string $_unused, string $title, string $MM_key, string $WS)
   
      Adds a "Function menu module" ('third level module') to an existing function menu for some other backend module
      The arguments values are generally determined by which function menu this is supposed to interact with
      See Inside TYPO3 for information on how to use this function.
      
      FOR USE IN ext_tables.php FILES
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L752>`__.
      
      :param string $modname: Module name
      :param string $className: Class name
      :param string $_unused: not in use anymore
      :param string $title: Title of module
      :param string $MM_key: Menu array key - default is "function
      :param string $WS: Workspace conditions. Blank means all workspaces, any other string can be a comma list of "online", "offline" and "custom
      
   .. php:method:: addPageTSConfig(string $content)
   
      Adds $content to the default Page TSconfig as set in $GLOBALS['TYPO3_CONF_VARS'][BE]['defaultPageTSconfig']
      Prefixed with a [GLOBAL] line
      FOR USE IN ext_localconf.php FILE
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L765>`__.
      
      :param string $content: Page TSconfig content
      
   .. php:method:: addUserTSConfig(string $content)
   
      Adds $content to the default User TSconfig as set in $GLOBALS['TYPO3_CONF_VARS'][BE]['defaultUserTSconfig']
      Prefixed with a [GLOBAL] line
      FOR USE IN ext_localconf.php FILE
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L779>`__.
      
      :param string $content: User TSconfig content
      
   .. php:method:: addLLrefForTCAdescr(string $key, string $file)
   
      Adds a reference to a locallang file with $GLOBALS['TCA_DESCR'] labels
      FOR USE IN ext_tables.php FILES
      eg. \TYPO3\CMS\Core\Utility\ExtensionManagementUtility::addLLrefForTCAdescr('pages', 'EXT:core/Resources/Private/Language/locallang_csh_pages.xlf'); for the pages table or \TYPO3\CMS\Core\Utility\ExtensionManagementUtility::addLLrefForTCAdescr('_MOD_web_layout', 'EXT:frontend/Resources/Private/Language/locallang_csh_weblayout.xlf'); for the Web > Page module.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L796>`__.
      
      :param string $key: Description key. Typically a database table (like "pages") but for applications can be other strings, but prefixed with "_MOD_")
      :param string $file: File reference to locallang file, eg. "EXT:core/Resources/Private/Language/locallang_csh_pages.xlf"
      
   .. php:method:: addNavigationComponent(string $componentId)
   
      Registers a navigation component e.g. page tree
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L809>`__.
      
      :param string $componentId: componentId is also a RequireJS module name e.g. 'TYPO3/CMS/MyExt/MyNavComponent'
      
   .. php:method:: addCoreNavigationComponent()
   
      Registers a core navigation component
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L821>`__.
      
      
   .. php:method:: addService(string $extKey, string $serviceType, string $serviceKey, array $info)
   
      Adds a service to the global services array
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L839>`__.
      
      :param string $extKey: Extension key
      :param string $serviceType: Service type, must not be prefixed "tx_" or "Tx_"
      :param string $serviceKey: Service key, must be prefixed "tx_", "Tx_" or "user_"
      :param array $info: Service description array
      
   .. php:method:: findService(string $serviceType, string $serviceSubType, array $excludeServiceKeys)
   
      Find the available service with highest priority
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L882>`__.
      
      :param string $serviceType: Service type
      :param string $serviceSubType: Service sub type
      :param array $excludeServiceKeys: Service keys that should be excluded in the search for a service.
      :returntype: array|false
      :returns: Service info array if a service was found, FALSE otherwise
      
   .. php:method:: findServiceByKey(string $serviceKey)
   
      Find a specific service identified by its key
      Note that this completely bypasses the notions of priority and quality
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L932>`__.
      
      :param string $serviceKey: Service key
      :returntype: array
      :returns: Service info array if a service was found
      
   .. php:method:: isServiceAvailable(string $serviceType, string $serviceKey, array $serviceDetails)
   
      Check if a given service is available, based on the executable files it depends on
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L959>`__.
      
      :param string $serviceType: Type of service
      :param string $serviceKey: Specific key of the service
      :param array $serviceDetails: Information about the service
      :returntype: bool
      :returns: Service availability
      
   .. php:method:: deactivateService(string $serviceType, string $serviceKey)
   
      Deactivate a service
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L982>`__.
      
      :param string $serviceType: Service type
      :param string $serviceKey: Service key
      
   .. php:method:: addPlugin(array $itemArray, string $type, string|null $extensionKey)
   
      Adds an entry to the list of plugins in content elements of type "Insert plugin"
      Takes the $itemArray (label, value[,icon]) and adds to the items-array of $GLOBALS['TCA'][tt_content] elements with CType "listtype" (or another field if $type points to another fieldname)
      If the value (array pos. 1) is already found in that items-array, the entry is substituted, otherwise the input array is added to the bottom.
      
      Use this function to add a frontend plugin to this list of plugin-types - or more generally use this function to add an entry to any selectorbox/radio-button set in the FormEngine
      
      FOR USE IN files in Configuration/TCA/Overrides/*.php Use in ext_tables.php FILES may break the frontend.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L1006>`__.
      
      :param array $itemArray: Numerical array: [0] => Plugin label, [1] => Plugin identifier / plugin key, ideally prefixed with an extension-specific name (e.g. "events2_list"), [2] => Icon identifier or path to plugin icon, [3] => an optional "group" ID, falls back to "default"
      :param string $type: Type (eg. "list_type") - basically a field from "tt_content" table
      :param string|null $extensionKey: The extension key
      
   .. php:method:: addPiFlexFormValue(string $piKeyToMatch, string $value, string $CTypeToMatch)
   
      Adds an entry to the "ds" array of the tt_content field "pi_flexform".
      
      This is used by plugins to add a flexform XML reference / content for use when they are selected as plugin or content element.
      FOR USE IN files in Configuration/TCA/Overrides/*.php Use in ext_tables.php FILES may break the frontend.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L1048>`__.
      
      :param string $piKeyToMatch: Plugin key as used in the list_type field. Use the asterisk * to match all list_type values.
      :param string $value: Either a reference to a flex-form XML file (eg. "FILE:EXT:newloginbox/flexform_ds.xml") or the XML directly.
      :param string $CTypeToMatch: Value of tt_content.CType (Content Type) to match. The default is "list" which corresponds to the "Insert Plugin" content element.  Use the asterisk * to match all CType values.
      
   .. php:method:: addToInsertRecords(string $table, string $content_table, string $content_field)
   
      Adds the $table tablename to the list of tables allowed to be includes by content element type "Insert records"
      By using $content_table and $content_field you can also use the function for other tables.
      
      FOR USE IN files in Configuration/TCA/Overrides/*.php Use in ext_tables.php FILES may break the frontend.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L1064>`__.
      
      :param string $table: Table name to allow for "insert record
      :param string $content_table: Table name TO WHICH the $table name is applied. See $content_field as well.
      :param string $content_field: Field name in the database $content_table in which $table is allowed to be added as a reference ("Insert Record")
      
   .. php:method:: addPItoST43(string $key, string $_, string $suffix, string $type, bool $cacheable)
   
      Add PlugIn to the default template rendering (previously called "Static Template #43")
      
      When adding a frontend plugin you will have to add both an entry to the TCA definition of tt_content table AND to the TypoScript template which must initiate the rendering.
      
      The naming of #43 has historic reason and is rooted inside code which is now put into a TER extension called
      "statictemplates". Since the static template with uid 43 is the "content.default" and practically always used
      for rendering the content elements it's very useful to have this function automatically adding the necessary
      TypoScript for calling your plugin.
      The logic is now generalized and called "defaultContentRendering", see addTypoScript() as well.
      
      $type determines the type of frontend plugin:
      + list_type (default) - the good old "Insert plugin" entry
      + CType - a new content element type
      + header_layout - an additional header type (added to the selection of layout1-5)
      + includeLib - just includes the library for manual use somewhere in TypoScript.
      (Remember that your $type definition should correspond to the column/items array in $GLOBALS['TCA'][tt_content] where you added the selector item for the element! See addPlugin() function)
      FOR USE IN ext_localconf.php FILES
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L1096>`__.
      
      :param string $key: The extension key
      :param string $_: unused since TYPO3 CMS 8
      :param string $suffix: Is used as a suffix of the class name (e.g. "_pi1")
      :param string $type: See description above
      :param bool $cacheable: If $cached is set as USER content object (cObject) is created - otherwise a USER_INT object is created.
      
   .. php:method:: addStaticFile(string $extKey, string $path, string $title)
   
      Call this method to add an entry in the static template list found in sys_templates
      FOR USE IN Configuration/TCA/Overrides/sys_template.php Use in ext_tables.php may break the frontend.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L1153>`__.
      
      :param string $extKey: Is of course the extension key
      :param string $path: Is the path where the template files "constants.typoscript", "setup.typoscript", and "include_static_file.txt"
      are found (relative to extPath, eg. "Configuration/TypoScript/Static/"). The file "include_static_file.txt",
      allows including other static templates defined in files, from your static template, and thus corresponds
      to the field 'include_static_file' in the sys_template table. The syntax for this is a comma separated list
      of static templates to include, example:
      EXT:fluid_styled_content/Configuration/TypoScript/,EXT:other_extension/Configuration/TypoScript/
      :param string $title: Is the title in the selector box.
      
   .. php:method:: registerPageTSConfigFile(string $extKey, string $filePath, string $title)
   
      Call this method to add an entry in the pageTSconfig list found in pages
      FOR USE in Configuration/TCA/Overrides/pages.php
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L1177>`__.
      
      :param string $extKey: The extension key
      :param string $filePath: The path where the TSconfig file is located
      :param string $title: The title in the selector box
      
   .. php:method:: addTypoScriptSetup(string $content)
   
      Adds $content to the default TypoScript setup code as set in $GLOBALS['TYPO3_CONF_VARS'][FE]['defaultTypoScript_setup']
      Prefixed with a [GLOBAL] line
      FOR USE IN ext_localconf.php FILES
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L1201>`__.
      
      :param string $content: TypoScript Setup string
      
   .. php:method:: addTypoScriptConstants(string $content)
   
      Adds $content to the default TypoScript constants code as set in $GLOBALS['TYPO3_CONF_VARS'][FE]['defaultTypoScript_constants']
      Prefixed with a [GLOBAL] line
      FOR USE IN ext_localconf.php FILES
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L1215>`__.
      
      :param string $content: TypoScript Constants string
      
   .. php:method:: addTypoScript(string $key, string $type, string $content, int|string $afterStaticUid)
   
      Adds $content to the default TypoScript code for either setup or constants as set in $GLOBALS['TYPO3_CONF_VARS'][FE]['defaultTypoScript_*']
      (Basically this function can do the same as addTypoScriptSetup and addTypoScriptConstants - just with a little more hazzle, but also with some more options!)
      FOR USE IN ext_localconf.php FILES
      Note: As of TYPO3 CMS 6.2, static template #43 (content: default) was replaced with "defaultContentRendering" which makes it
      possible that a first extension like fluid_styled_content registers a "contentRendering" template (= a template that defines default content rendering TypoScript)
      by adding itself to $TYPO3_CONF_VARS[FE][contentRenderingTemplates][] = 'myext/Configuration/TypoScript'.
      
      An extension calling addTypoScript('myext', 'setup', $typoScript, 'defaultContentRendering') will add its TypoScript directly after;
      For now, "43" and "defaultContentRendering" can be used, but "defaultContentRendering" is more descriptive and
      should be used in the future.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L1239>`__.
      
      :param string $key: Is the extension key (informative only).
      :param string $type: Is either "setup" or "constants" and obviously determines which kind of TypoScript code we are adding.
      :param string $content: Is the TS content, will be prefixed with a [GLOBAL] line and a comment-header.
      :param int|string $afterStaticUid: string pointing to the "key" of a static_file template ([reduced extension_key]/[local path]). The points is that the TypoScript you add is included only IF that static template is included (and in that case, right after). So effectively the TypoScript you set can specifically overrule settings from those static templates.
      
   .. php:method:: getExtensionIcon(string $extensionPath, bool $returnFullPath)
   
      Find extension icon
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L1287>`__.
      
      :param string $extensionPath: Path to extension directory.
      :param bool $returnFullPath: Return full path of file.
      :returntype: string
      
   .. php:method:: getLoadedExtensionListArray()
   
      Gets an array of loaded extension keys
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L1623>`__.
      
      :returntype: array
      
   .. php:method:: loadExtension(string $extensionKey)
   
      Loads given extension
      
      Warning: This method only works if the upgrade wizard to transform
      localconf.php to LocalConfiguration.php was already run
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L1637>`__.
      
      :param string $extensionKey: Extension key to load
      
   .. php:method:: unloadExtension(string extensionKey)
   
      Unloads given extension
      
      Warning: This method only works if the upgrade wizard to transform
      localconf.php to LocalConfiguration.php was already run
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Utility/ExtensionManagementUtility.php#L1653>`__.
      
      :param string $extensionKey: the extensionKey
