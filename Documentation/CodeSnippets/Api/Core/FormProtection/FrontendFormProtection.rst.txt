.. Generated by https://github.com/linawolf/t3docs_restructured_api_tools 
.. php:namespace::  TYPO3\CMS\Core\FormProtection

.. php:class:: FrontendFormProtection

   This class provides protection against cross-site request forgery (XSRF/CSRF)
   for actions in the frontend that change data.
   
   How to use:
   
   For each form (or link that changes some data), create a token and
   insert is as a hidden form element or use it as GET argument. The name of the form element does not
   matter; you only need it to get the form token for verifying it.
   
   <pre>
   $formToken = TYPO3\CMS\Core\FormProtection\FormProtectionFactory::get()
   ->generateToken(
   'User setup', 'edit'
   );
   $this->content .= '<input type="hidden" name="formToken" value="' .
   $formToken . '" />';
   </pre>
   
   The three parameters $formName, $action and $formInstanceName can be
   arbitrary strings, but they should make the form token as specific as
   possible. For different forms (e.g. User setup and editing a news
   record) or different records (with different UIDs) from the same table,
   those values should be different.
   
   For editing a news record, the call could look like this:
   
   <pre>
   $formToken = \TYPO3\CMS\Core\FormProtection\FormProtectionFactory::get()
   ->getFormProtection()->generateToken(
   'news', 'edit', $uid
   );
   </pre>
   
   
   When processing the data that has been submitted by the form, you can check
   that the form token is valid like this:
   
   <pre>
   if ($dataHasBeenSubmitted && \TYPO3\CMS\Core\FormProtection\FormProtectionFactory::get()
   ->validateToken(
   \TYPO3\CMS\Core\Utility\GeneralUtility::_POST('formToken'),
   'User setup', 'edit
   )
   ) {
   Processes the data.
   } else {
   Create a flash message for the invalid token or just discard this request.
   }
   </pre>
   
   See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/FormProtection/FrontendFormProtection.php>`__.

   
   .. php:method:: clean()
   
      Deletes the session token and persists the (empty) token.
      
      This function is intended to be called when a user logs on or off.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/FormProtection/FrontendFormProtection.php#L58>`__.
      
      
   .. php:method:: generateToken()
   
      Generates a token for a form by hashing the given parameters
      with the secret session token.
      
      Calling this function two times with the same parameters will create
      the same valid token during one user session.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/FormProtection/FrontendFormProtection.php#L77>`__.
      
      
   .. php:method:: validateToken()
   
      Checks whether the token $tokenId is valid in the form $formName with
      $formInstanceName.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/FormProtection/FrontendFormProtection.php#L96>`__.
      
      
   .. php:method:: __wakeup()
   
      Deny object deserialization.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/FormProtection/FrontendFormProtection.php#L31>`__.
