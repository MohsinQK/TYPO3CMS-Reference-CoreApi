.. Generated by https://github.com/linawolf/t3docs_restructured_api_tools 
.. php:namespace::  TYPO3\CMS\Core\Configuration

.. php:class:: ExtensionConfiguration

   API to get() instance specific extension configuration options.
   
   Extension authors are encouraged to use this API - it is currently a simple
   wrapper to access TYPO3_CONF_VARS['EXTENSIONS'] but could later become something
   different in case core decides to store extension configuration elsewhere.
   
   Extension authors must not access TYPO3_CONF_VARS['EXTENSIONS'] on their own.
   
   Extension configurations are often 'feature flags' currently defined by
   ext_conf_template.txt files. The core (more specifically the install tool)
   takes care default values and overridden values are properly prepared upon
   loading or updating an extension.
   
   Note only ->get() is official API and other public methods are low level
   core internal API that is usually only used by extension manager and install tool.
   
   See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Configuration/ExtensionConfiguration.php>`__.

   .. php:method:: get(string $extension, string $path)
   
      Get a single configuration value, a sub array or the whole configuration.
      
      Examples:
      // Simple and typical usage: Get a single config value, or an array if the key is a "TypoScript"
      // a-like sub-path in ext_conf_template.txt "foo.bar = defaultValue"
      ->get('myExtension', 'aConfigKey');
      
      // Get all current configuration values, always an array
      ->get('myExtension');
      
      // Get a nested config value if the path is a "TypoScript" a-like sub-path
      // in ext_conf_template.txt "topLevelKey.subLevelKey = defaultValue"
      ->get('myExtension', 'topLevelKey/subLevelKey')
      
      Notes:
      - If a configuration or configuration path of an extension is not found, the
        code tries to synchronize configuration with ext_conf_template.txt first, only
        if still not found, it will throw exceptions.
      - Return values are NOT type safe: A boolean false could be returned as string 0.
        Cast accordingly.
      - This API throws exceptions if the path does not exist or the extension
        configuration is not available. The install tool takes care any new
        ext_conf_template.txt values are available TYPO3_CONF_VARS['EXTENSIONS'],
        a thrown exception indicates a programming error on developer side
        and should not be caught.
      - It is not checked if the extension in question is loaded at all,
        it's just checked the extension configuration path exists.
      - Extensions should typically not get configuration of a different extension.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Configuration/ExtensionConfiguration.php#L81>`__.
      
      :param string $extension: Extension name
      :param string $path: Configuration path - e.g. "featureCategory/coolThingIsEnabled"
      
   .. php:method:: getDefaultConfigurationRawString(string $extensionKey)
   
      Helper method of ext_conf_template.txt parsing.
      
      Return content of an extensions ext_conf_template.txt file if
      the file exists, empty string if file does not exist.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Configuration/ExtensionConfiguration.php#L271>`__.
      
      :param string $extensionKey: Extension key
      :returntype: string
