.. Generated by https://github.com/linawolf/t3docs_restructured_api_tools 
.. php:namespace::  TYPO3\CMS\Core\Configuration\FlexForm

.. php:class:: FlexFormTools

   Contains functions for manipulating flex form data
   
   See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Configuration/FlexForm/FlexFormTools.php>`__.

   .. php:attr:: reNumberIndexesOfSectionData
   
      If set, section indexes are re-numbered before processing
      
      
   .. php:attr:: flexArray2Xml_options
   
      Options for array2xml() for flexform.
      
      This will map the weird keys from the internal array to tags that could potentially be checked with a DTD/schema
      
      
   .. php:attr:: callBackObj
   
      Reference to object called
      
      
   .. php:attr:: cleanFlexFormXML
   
      Used for accumulation of clean XML
      
      
   .. php:method:: getDataStructureIdentifier(array $fieldTca, string $tableName, string $fieldName, array $row)
   
      The method locates a specific data structure from given TCA and row combination
      and returns an identifier string that can be handed around, and can be resolved
      to a single data structure later without giving $row and $tca data again.
      
      Note: The returned syntax is meant to only specify the target location of the data structure.
      It SHOULD NOT be abused and enriched with data from the record that is dealt with. For
      instance, it is now allowed to add source record specific date like the uid or the pid!
      If that is done, it is up to the hook consumer to take care of possible side effects, eg. if
      the data handler copies or moves records around and those references change.
      
      This method gets: Source data that influences the target location of a data structure
      This method returns: Target specification of the data structure
      
      This method is "paired" with method getFlexFormDataStructureByIdentifier() that
      will resolve the returned syntax again and returns the data structure itself.
      
      Both methods can be extended via hooks to return and accept additional
      identifier strings if needed, and to transmit further information within the identifier strings.
      
      Note that the TCA for data structure definitions MUST NOT be overridden by
      'columnsOverrides' or by parent TCA in an inline relation! This would create a huge mess.
      
      Note: This method and the resolving methods below are well unit tested and document all
      nasty details this way.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Configuration/FlexForm/FlexFormTools.php#L118>`__.
      
      :param array $fieldTca: Full TCA of the field in question that has type=flex set
      :param string $tableName: The table name of the TCA field
      :param string $fieldName: The field name
      :param array $row: The data row
      :returntype: string
      :returns: Identifier string
      
   .. php:method:: parseDataStructureByIdentifier(string $identifier)
   
      Parse a data structure identified by $identifier to the final data structure array.
      
      This method is called after getDataStructureIdentifier(), finds the data structure
      and returns it.
      
      Hooks allow to manipulate the find logic and to post process the data structure array.
      
      Note that the TCA for data structure definitions MUST NOT be overridden by
      'columnsOverrides' or by parent TCA in an inline relation! This would create a huge mess.
      
      After the data structure definition is found, the method resolves:
      * FILE:EXT: prefix of the data structure itself - the ds is in a file
      * FILE:EXT: prefix for sheets - if single sheets are in files
      * Create an sDEF sheet if the data structure has non, yet.
      
      After that method is run, the data structure is fully resolved to an array,
      and same base normalization is done: If the ds did not contain a sheet,
      it will have one afterwards as "sDEF"
      
      This method gets: Target specification of the data structure.
      This method returns: The normalized data structure parsed to an array.
      
      Read the unit tests for nasty details.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Configuration/FlexForm/FlexFormTools.php#L577>`__.
      
      :param string $identifier: String to find the data structure location
      :returntype: array
      :returns: Parsed and normalized data structure
      
   .. php:method:: traverseFlexFormXMLData(string $table, string $field, array $row, object $callBackObj, string $callBackMethod_value)
   
      Handler for Flex Forms
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Configuration/FlexForm/FlexFormTools.php#L771>`__.
      
      :param string $table: The table name of the record
      :param string $field: The field name of the flexform field to work on
      :param array $row: The record data array
      :param object $callBackObj: Object in which the call back function is located
      :param string $callBackMethod_value: Method name of call back function in object for values
      
   .. php:method:: traverseFlexFormXMLData_recurse(array $dataStruct, array $editData, array $PA, string $path)
   
      Recursively traversing flexform data according to data structure and element data
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Configuration/FlexForm/FlexFormTools.php#L825>`__.
      
      :param array $dataStruct: (Part of) data structure array that applies to the sub section of the flexform data we are processing
      :param array $editData: (Part of) edit data array, reflecting current part of data structure
      :param array $PA: Additional parameters passed.
      :param string $path: Telling the "path" to the element in the flexform XML
      
   .. php:method:: cleanFlexFormXML(string $table, string $field, array $row)
   
      Cleaning up FlexForm XML to hold only the values it may according to its Data Structure. Also the order of tags will follow that of the data structure.
      
      BE CAREFUL: DO not clean records in workspaces unless IN the workspace! The Data Structure might resolve falsely on a workspace record when cleaned from Live workspace.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Configuration/FlexForm/FlexFormTools.php#L905>`__.
      
      :param string $table: Table name
      :param string $field: Field name of the flex form field in which the XML is found that should be cleaned.
      :param array $row: The record
      
   .. php:method:: cleanFlexFormXML_callBackFunction(array $dsArr, mixed $data, array $PA, string $path, \FlexFormTools $pObj)
   
      Call back function for \TYPO3\CMS\Core\Configuration\FlexForm\FlexFormTools class
      Basically just setting the value in a new array (thus cleaning because only values that are valid are visited!)
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Configuration/FlexForm/FlexFormTools.php#L926>`__.
      
      :param array $dsArr: Data structure for the current value
      :param mixed $data: Current value
      :param array $PA: Additional configuration used in calling function
      :param string $path: Path of value in DS structure
      :param \FlexFormTools $pObj: caller
      
   .. php:method:: flexArray2Xml(array $array, bool $addPrologue)
   
      Convert FlexForm data array to XML
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Configuration/FlexForm/FlexFormTools.php#L939>`__.
      
      :param array $array: Array to output in <T3FlexForms> XML
      :param bool $addPrologue: If set, the XML prologue is returned as well.
