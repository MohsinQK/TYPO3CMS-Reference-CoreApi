.. Generated by https://github.com/linawolf/t3docs_restructured_api_tools 
.. php:namespace::  TYPO3\CMS\Core\Service

.. php:class:: MarkerBasedTemplateService

   Helper functionality for subparts and marker substitution
   ###MYMARKER###
   
   See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Service/MarkerBasedTemplateService.php>`__.

   
   .. php:method:: getSubpart(string $content, string $marker)
   
      Returns the first subpart encapsulated in the marker, $marker
      (possibly present in $content as a HTML comment)
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Service/MarkerBasedTemplateService.php#L42>`__.
      
      :param string $content: Content with subpart wrapped in fx. "###CONTENT_PART###" inside.
      :param string $marker: Marker string, eg. "###CONTENT_PART###
      
   .. php:method:: substituteSubpart(string $content, string $marker, string|array $subpartContent, bool $recursive, bool $keepMarker)
   
      Substitutes a subpart in $content with the content of $subpartContent.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Service/MarkerBasedTemplateService.php#L85>`__.
      
      :param string $content: Content with subpart wrapped in fx. "###CONTENT_PART###" inside.
      :param string $marker: Marker string, eg. "###CONTENT_PART###
      :param string|array $subpartContent: If $subpartContent happens to be an array, it's [0] and [1] elements are wrapped around the content of the subpart (fetched by getSubpart())
      :param bool $recursive: If $recursive is set, the function calls itself with the content set to the remaining part of the content after the second marker. This means that proceeding subparts are ALSO substituted!
      :param bool $keepMarker: If set, the marker around the subpart is not removed, but kept in the output
      
   .. php:method:: substituteSubpartArray(string $content, array $subpartsContent)
   
      Substitutes multiple subparts at once
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Service/MarkerBasedTemplateService.php#L159>`__.
      
      :param string $content: The content stream, typically HTML template content.
      :param array $subpartsContent: The array of key/value pairs being subpart/content values used in the substitution. For each element in this array the function will substitute a subpart in the content stream with the content.
      
   .. php:method:: substituteMarker(string $content, string $marker, mixed $markContent)
   
      Substitutes a marker string in the input content
      (by a simple str_replace())
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Service/MarkerBasedTemplateService.php#L179>`__.
      
      :param string $content: The content stream, typically HTML template content.
      :param string $marker: The marker string, typically on the form "###[the marker string]###
      :param mixed $markContent: The content to insert instead of the marker string found.
      
   .. php:method:: substituteMarkerArray(string $content, array $markContentArray, string $wrap, bool $uppercase, bool $deleteUnused)
   
      Traverses the input $markContentArray array and for each key the marker
      by the same name (possibly wrapped and in upper case) will be
      substituted with the keys value in the array. This is very useful if you
      have a data-record to substitute in some content. In particular when you
      use the $wrap and $uppercase values to pre-process the markers. Eg. a
      key name like "myfield" could effectively be represented by the marker
      "###MYFIELD###" if the wrap value was "###|###" and the $uppercase
      boolean TRUE.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Service/MarkerBasedTemplateService.php#L204>`__.
      
      :param string $content: The content stream, typically HTML template content.
      :param array $markContentArray: The array of key/value pairs being marker/content values used in the substitution. For each element in this array the function will substitute a marker in the content stream with the content.
      :param string $wrap: A wrap value - [part 1] | [part 2] - for the markers before substitution
      :param bool $uppercase: If set, all marker string substitution is done with upper-case markers.
      :param bool $deleteUnused: If set, all unused marker are deleted.
      
   .. php:method:: substituteMarkerAndSubpartArrayRecursive(string $content, array $markersAndSubparts, string $wrap, bool $uppercase, bool $deleteUnused)
   
      Replaces all markers and subparts in a template with the content provided in the structured array.
      
      The array is built like the template with its markers and subparts. Keys represent the marker name and the values the
      content.
      If the value is not an array the key will be treated as a single marker.
      If the value is an array the key will be treated as a subpart marker.
      Repeated subpart contents are of course elements in the array, so every subpart value must contain an array with its
      markers.
      
      $markersAndSubparts = array (
         '###SINGLEMARKER1###' => 'value 1',
         '###SUBPARTMARKER1###' => array(
             0 => array(
                 '###SINGLEMARKER2###' => 'value 2',
             ),
             1 => array(
                 '###SINGLEMARKER2###' => 'value 3',
             )
         ),
         '###SUBPARTMARKER2###' => array(
         ),
      )
      Subparts can be nested, so below the 'SINGLEMARKER2' it is possible to have another subpart marker with an array as the
      value, which in its turn contains the elements of the sub-subparts.
      Empty arrays for Subparts will cause the subtemplate to be cleared.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Service/MarkerBasedTemplateService.php#L269>`__.
      
      :param string $content: The content stream, typically HTML template content.
      :param array $markersAndSubparts: The array of single markers and subpart contents.
      :param string $wrap: A wrap value - [part1] | [part2] - for the markers before substitution.
      :param bool $uppercase: If set, all marker string substitution is done with upper-case markers.
      :param bool $deleteUnused: If set, all unused single markers are deleted.
      
   .. php:method:: substituteMarkerArrayCached(string $content, array $markContentArray, array $subpartContentArray, array $wrappedSubpartContentArray)
   
      Multi substitution function with caching.
      
      This function should be a one-stop substitution function for working
      with HTML-template. It does not substitute by str_replace but by
      splitting. This secures that the value inserted does not themselves
      contain markers or subparts.
      
      Note that the "caching" won't cache the content of the substitution,
      but only the splitting of the template in various parts. So if you
      want only one cache-entry per template, make sure you always pass the
      exact same set of marker/subpart keys. Else you will be flooding the
      user's cache table.
      
      This function takes three kinds of substitutions in one:
      $markContentArray is a regular marker-array where the 'keys' are
      substituted in $content with their values
      
      $subpartContentArray works exactly like markContentArray only is whole
      subparts substituted and not only a single marker.
      
      $wrappedSubpartContentArray is an array of arrays with 0/1 keys where
      the subparts pointed to by the main key is wrapped with the 0/1 value
      alternating.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Service/MarkerBasedTemplateService.php#L361>`__.
      
      :param string $content: The content stream, typically HTML template content.
      :param array $markContentArray: Regular marker-array where the 'keys' are substituted in $content with their values
      :param array $subpartContentArray: Exactly like markContentArray only is whole subparts substituted and not only a single marker.
      :param array $wrappedSubpartContentArray: An array of arrays with 0/1 keys where the subparts pointed to by the main key is wrapped with the 0/1 value alternating.
      
   .. php:method:: substituteMarkerInObject(mixed $tree, array $markContentArray)
   
      Substitute marker array in an array of values
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Service/MarkerBasedTemplateService.php#L467>`__.
      
      :param mixed $tree: If string, then it just calls substituteMarkerArray. If array(and even multi-dim) then for each key/value pair the marker array will be substituted (by calling this function recursively)
      :param array $markContentArray: The array of key/value pairs being marker/content values used in the substitution. For each element in this array the function will substitute a marker in the content string/array values.
      
   .. php:method:: fillInMarkerArray(array $markContentArray, array $row, string $fieldList, bool $nl2br, string $prefix, bool $htmlSpecialCharsValue, bool $respectXhtml)
   
      Adds elements to the input $markContentArray based on the values from
      the fields from $fieldList found in $row
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Service/MarkerBasedTemplateService.php#L492>`__.
      
      :param array $markContentArray: Array with key/values being marker-strings/substitution values.
      :param array $row: An array with keys found in the $fieldList (typically a record) which values should be moved to the $markContentArray
      :param string $fieldList: A list of fields from the $row array to add to the $markContentArray array. If empty all fields from $row will be added (unless they are integers)
      :param bool $nl2br: If set, all values added to $markContentArray will be nl2br()'ed
      :param string $prefix: Prefix string to the fieldname before it is added as a key in the $markContentArray. Notice that the keys added to the $markContentArray always start and end with "###
      :param bool $htmlSpecialCharsValue: If set, all values are passed through htmlspecialchars() - RECOMMENDED to avoid most obvious XSS and maintain XHTML compliance.
      :param bool $respectXhtml: if set, and $nl2br is set, then the new lines are added with <br /> instead of <br>
