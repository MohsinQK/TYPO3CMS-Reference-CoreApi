.. Generated by https://github.com/linawolf/t3docs_restructured_api_tools 
.. php:namespace::  TYPO3\CMS\Core\Service

.. php:class:: DependencyOrderingService

   This class provides functionality to build
   an ordered list from a set of dependencies.
   
   We use an adjacency matrix for the dependency graph (DAG)
   
   Example structure of the DAG is:
      A => (A => FALSE, B => TRUE,  C => FALSE)
      B => (A => FALSE, B => FALSE, C => FALSE)
      C => (A => TRUE,  B => FALSE, C => FALSE)
   
      A depends on B, C depends on A, B is independent
   
   See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Service/DependencyOrderingService.php>`__.

   .. php:method:: orderByDependencies(string $beforeKey, string $afterKey)
   
      Order items by specified dependencies before/after
      
      The dependencies of an items are specified as:
        'someItemKey' => [
           'before' => ['someItemKeyA', 'someItemKeyB']
           'after' => ['someItemKeyC']
        ]
      
      If your items use different keys for specifying the relations, you can define the appropriate keys
      by setting the $beforeKey and $afterKey parameters accordingly.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Service/DependencyOrderingService.php#L50>`__.
      
      :param string $beforeKey: The key to use in a dependency which specifies the "before"-relation. eg. 'sortBefore', 'loadBefore'
      :param string $afterKey: The key to use in a dependency which specifies the "after"-relation. eg. 'sortAfter', 'loadAfter'
      
   .. php:method:: buildDependencyGraph(string $beforeKey, string $afterKey)
   
      Builds the dependency graph for the given dependencies
      
      The dependencies have to specified in the following structure:
      $dependencies = [
        'someKey' => [
           'before' => ['someKeyA', 'someKeyB']
           'after' => ['someKeyC']
        ]
      ]
      
      We interpret a dependency like
        'A' => [
          'before' => ['B'],
          'after' => ['C', 'D']
        ]
      as
        - A depends on C
        - A depends on D
        - B depends on A
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Service/DependencyOrderingService.php#L88>`__.
      
      :param string $beforeKey: The key to use in a dependency which specifies the "before"-relation. eg. 'sortBefore', 'loadBefore'
      :param string $afterKey: The key to use in a dependency which specifies the "after"-relation. eg. 'sortAfter', 'loadAfter'
      
   .. php:method:: calculateOrder()
   
      Calculate an ordered list for a dependencyGraph
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Service/DependencyOrderingService.php#L132>`__.
      
      
   .. php:method:: findRootIds()
   
      Find all root nodes of a graph
      
      Root nodes are those, where nothing else depends on (they can be the last in the loading order).
      If there are no dependencies at all, all nodes are root nodes.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/core/Classes/Service/DependencyOrderingService.php#L218>`__.
