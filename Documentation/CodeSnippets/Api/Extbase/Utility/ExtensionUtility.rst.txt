.. Generated by https://github.com/linawolf/t3docs_restructured_api_tools 
.. php:namespace::  TYPO3\CMS\Extbase\Utility

.. php:class:: ExtensionUtility

   Utilities to manage plugins and  modules of an extension. Also useful to auto-generate the autoloader registry
   file ext_autoload.php.
   
   See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/extbase/Classes/Utility/ExtensionUtility.php>`__.

   .. php:const:: PLUGIN_TYPE_PLUGIN
   
      :php:`'list_type'`, type string
      
      .. php:const:: PLUGIN_TYPE_CONTENT_ELEMENT
   
      :php:`'CType'`, type string
      
      
   .. php:method:: configurePlugin(string $extensionName, string $pluginName, array $controllerActions, array $nonCacheableControllerActions, string $pluginType)
   
      Add auto-generated TypoScript to configure the Extbase Dispatcher.
      
      When adding a frontend plugin you will have to add both an entry to the TCA definition
      of tt_content table AND to the TypoScript template which must initiate the rendering.
      Including the plugin code after "defaultContentRendering" adds the necessary TypoScript
      for calling the appropriate controller and action of your plugin.
      FOR USE IN ext_localconf.php FILES
      Usage: 2
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/extbase/Classes/Utility/ExtensionUtility.php#L46>`__.
      
      :param string $extensionName: The extension name (in UpperCamelCase) or the extension key (in lower_underscore)
      :param string $pluginName: must be a unique id for your plugin in UpperCamelCase (the string length of the extension key added to the length of the plugin name should be less than 32!)
      :param array $controllerActions: is an array of allowed combinations of controller and action stored in an array (controller name as key and a comma separated list of action names as value, the first controller and its first action is chosen as default)
      :param array $nonCacheableControllerActions: is an optional array of controller name and  action names which should not be cached (array as defined in $controllerActions)
      :param string $pluginType: either \TYPO3\CMS\Extbase\Utility\ExtensionUtility::PLUGIN_TYPE_PLUGIN (default) or \TYPO3\CMS\Extbase\Utility\ExtensionUtility::PLUGIN_TYPE_CONTENT_ELEMENT
      
   .. php:method:: registerPlugin(string $extensionName, string $pluginName, string $pluginTitle, string $pluginIcon, string $group)
   
      Register an Extbase PlugIn into backend's list of plugins
      FOR USE IN Configuration/TCA/Overrides/tt_content.php
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/extbase/Classes/Utility/ExtensionUtility.php#L118>`__.
      
      :param string $extensionName: The extension name (in UpperCamelCase) or the extension key (in lower_underscore)
      :param string $pluginName: must be a unique id for your plugin in UpperCamelCase (the string length of the extension key added to the length of the plugin name should be less than 32!)
      :param string $pluginTitle: is a speaking title of the plugin that will be displayed in the drop down menu in the backend
      :param string $pluginIcon: is an icon identifier or file path prepended with "EXT:", that will be displayed in the drop down menu in the backend (optional)
      :param string $group: add this plugin to a plugin group, should be something like "news" or the like, "default" as regular
      :returntype: string
      
   .. php:method:: registerModule(unknown extensionName, unknown mainModuleName = '', unknown subModuleName = '', unknown position = '', array controllerActions = array (
   ), array moduleConfiguration = array (
   ))
   
      To allow extension authors to support multiple versions, this method is kept until
      TYPO3 v13, but is no longer used nor evaluated from TYPO3 v12.0. To register modules,
      place the configuration in your extensions' Configuration/Backend/Modules.php file.
      
      The method deliberately does not throw a deprecation warning in order to keep the noise
      of deprecation warnings small.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/extbase/Classes/Utility/ExtensionUtility.php#L155>`__.
      
      :param unknown $extensionName: the extensionName
      :param unknown $mainModuleName: the mainModuleName, default: ''
      :param unknown $subModuleName: the subModuleName, default: ''
      :param unknown $position: the position, default: ''
      :param array $controllerActions: the controllerActions, default: array (
      )
      :param array $moduleConfiguration: the moduleConfiguration, default: array (
      )
      
   .. php:method:: registerTypeConverter()
   
      Register a type converter by class name.
      
      See source code on `GitHub <https://github.com/TYPO3/typo3/blob/main/typo3/sysext/extbase/Classes/Utility/ExtensionUtility.php#L211>`__.
